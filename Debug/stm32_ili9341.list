
stm32_ili9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00027c40  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c964  0802c964  00040060  2**0
                  CONTENTS
  4 .ARM          00000008  0802c964  0802c964  0003c964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c96c  0802c96c  00040060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c96c  0802c96c  0003c96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c970  0802c970  0003c970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0802c974  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000060  0802c9d4  00040060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0802c9d4  000402b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000842b  00000000  00000000  000400d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b3b  00000000  00000000  000484fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0004a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b5  00000000  00000000  0004a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000152e4  00000000  00000000  0004adb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f67  00000000  00000000  00060099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083c54  00000000  00000000  0006a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022cc  00000000  00000000  000edc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000eff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d0c 	.word	0x08004d0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004d0c 	.word	0x08004d0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <DelayUs>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

/* imprecise small delay */
__STATIC_INLINE void DelayUs(volatile uint32_t us)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	us *= (SystemCoreClock / 1000000);
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <DelayUs+0x38>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <DelayUs+0x3c>)
 800058a:	fba2 2303 	umull	r2, r3, r2, r3
 800058e:	0c9b      	lsrs	r3, r3, #18
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	607b      	str	r3, [r7, #4]
	while (us--);
 8000598:	bf00      	nop
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1fa      	bne.n	800059a <DelayUs+0x1e>
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000004 	.word	0x20000004
 80005b8:	431bde83 	.word	0x431bde83

080005bc <ILI9341_DrawHollowCircle>:

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	4603      	mov	r3, r0
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	3b01      	subs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
	int y = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
	int dy = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 80005f6:	e08d      	b.n	8000714 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	4413      	add	r3, r2
 8000600:	b298      	uxth	r0, r3
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	b29a      	uxth	r2, r3
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	b29b      	uxth	r3, r3
 800060c:	883a      	ldrh	r2, [r7, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	f000 fe38 	bl	8001284 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	b29a      	uxth	r2, r3
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4413      	add	r3, r2
 800061c:	b298      	uxth	r0, r3
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	b29a      	uxth	r2, r3
 8000622:	88bb      	ldrh	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	b29b      	uxth	r3, r3
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f000 fe2a 	bl	8001284 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	b29b      	uxth	r3, r3
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	b298      	uxth	r0, r3
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	b29a      	uxth	r2, r3
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	883a      	ldrh	r2, [r7, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	f000 fe1c 	bl	8001284 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	b29b      	uxth	r3, r3
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b298      	uxth	r0, r3
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	b29a      	uxth	r2, r3
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	b29b      	uxth	r3, r3
 8000660:	883a      	ldrh	r2, [r7, #0]
 8000662:	4619      	mov	r1, r3
 8000664:	f000 fe0e 	bl	8001284 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	b29b      	uxth	r3, r3
 800066c:	88fa      	ldrh	r2, [r7, #6]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b298      	uxth	r0, r3
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	b29b      	uxth	r3, r3
 8000676:	88ba      	ldrh	r2, [r7, #4]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	883a      	ldrh	r2, [r7, #0]
 800067e:	4619      	mov	r1, r3
 8000680:	f000 fe00 	bl	8001284 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	b29b      	uxth	r3, r3
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	b298      	uxth	r0, r3
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	b29b      	uxth	r3, r3
 8000692:	88ba      	ldrh	r2, [r7, #4]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b29b      	uxth	r3, r3
 8000698:	883a      	ldrh	r2, [r7, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	f000 fdf2 	bl	8001284 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	4413      	add	r3, r2
 80006a8:	b298      	uxth	r0, r3
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	88ba      	ldrh	r2, [r7, #4]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	883a      	ldrh	r2, [r7, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	f000 fde4 	bl	8001284 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	4413      	add	r3, r2
 80006c4:	b298      	uxth	r0, r3
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	88ba      	ldrh	r2, [r7, #4]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	883a      	ldrh	r2, [r7, #0]
 80006d2:	4619      	mov	r1, r3
 80006d4:	f000 fdd6 	bl	8001284 <ILI9341_DrawPixel>

		if (err <= 0)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dc09      	bgt.n	80006f2 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	3301      	adds	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
			err += dy;
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	4413      	add	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
			dy += 2;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	3302      	adds	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dd0d      	ble.n	8000714 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	61fb      	str	r3, [r7, #28]
			dx += 2;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3302      	adds	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	425b      	negs	r3, r3
 8000708:	005a      	lsls	r2, r3, #1
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4413      	add	r3, r2
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000714:	69fa      	ldr	r2, [r7, #28]
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	429a      	cmp	r2, r3
 800071a:	f6bf af6d 	bge.w	80005f8 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3724      	adds	r7, #36	; 0x24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b08b      	sub	sp, #44	; 0x2c
 800072c:	af00      	add	r7, sp, #0
 800072e:	4604      	mov	r4, r0
 8000730:	4608      	mov	r0, r1
 8000732:	4611      	mov	r1, r2
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	80fb      	strh	r3, [r7, #6]
 800073a:	4603      	mov	r3, r0
 800073c:	80bb      	strh	r3, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	807b      	strh	r3, [r7, #2]
 8000742:	4613      	mov	r3, r2
 8000744:	803b      	strh	r3, [r7, #0]

	int x = radius;
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 800074e:	887b      	ldrh	r3, [r7, #2]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	f1c3 0301 	rsb	r3, r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000760:	e061      	b.n	8000826 <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	e018      	b.n	800079e <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	b298      	uxth	r0, r3
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	b29a      	uxth	r2, r3
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	b29b      	uxth	r3, r3
 800077a:	883a      	ldrh	r2, [r7, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f000 fd81 	bl	8001284 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	b298      	uxth	r0, r3
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	b29b      	uxth	r3, r3
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	b29b      	uxth	r3, r3
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	f000 fd76 	bl	8001284 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	3301      	adds	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	88fa      	ldrh	r2, [r7, #6]
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	4413      	add	r3, r2
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dde0      	ble.n	800076c <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 80007aa:	88fa      	ldrh	r2, [r7, #6]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e018      	b.n	80007e6 <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	b298      	uxth	r0, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	883a      	ldrh	r2, [r7, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f000 fd5d 	bl	8001284 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	b298      	uxth	r0, r3
 80007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	88ba      	ldrh	r2, [r7, #4]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	883a      	ldrh	r2, [r7, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	f000 fd52 	bl	8001284 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	4413      	add	r3, r2
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dde0      	ble.n	80007b4 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	3301      	adds	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	4413      	add	r3, r2
 80007fe:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	3302      	adds	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	005a      	lsls	r2, r3, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	4413      	add	r3, r2
 800080e:	2b00      	cmp	r3, #0
 8000810:	dd09      	ble.n	8000826 <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	3b01      	subs	r3, #1
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	4413      	add	r3, r2
 800081e:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	3302      	adds	r3, #2
 8000824:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8000826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	429a      	cmp	r2, r3
 800082c:	da99      	bge.n	8000762 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	372c      	adds	r7, #44	; 0x2c
 8000834:	46bd      	mov	sp, r7
 8000836:	bd90      	pop	{r4, r7, pc}

08000838 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	4604      	mov	r4, r0
 8000840:	4608      	mov	r0, r1
 8000842:	4611      	mov	r1, r2
 8000844:	461a      	mov	r2, r3
 8000846:	4623      	mov	r3, r4
 8000848:	80fb      	strh	r3, [r7, #6]
 800084a:	4603      	mov	r3, r0
 800084c:	80bb      	strh	r3, [r7, #4]
 800084e:	460b      	mov	r3, r1
 8000850:	807b      	strh	r3, [r7, #2]
 8000852:	4613      	mov	r3, r2
 8000854:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 800086c:	887a      	ldrh	r2, [r7, #2]
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 800087e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088a:	d501      	bpl.n	8000890 <ILI9341_DrawHollowRectangleCoord+0x58>
 800088c:	2301      	movs	r3, #1
 800088e:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000890:	f04f 0300 	mov.w	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 8000896:	883a      	ldrh	r2, [r7, #0]
 8000898:	88bb      	ldrh	r3, [r7, #4]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 80008a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b4:	d501      	bpl.n	80008ba <ILI9341_DrawHollowRectangleCoord+0x82>
 80008b6:	2301      	movs	r3, #1
 80008b8:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 80008c0:	887a      	ldrh	r2, [r7, #2]
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	82fb      	strh	r3, [r7, #22]
 80008c8:	e003      	b.n	80008d2 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 80008ca:	88fa      	ldrh	r2, [r7, #6]
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80008d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008d4:	8afa      	ldrh	r2, [r7, #22]
 80008d6:	88b9      	ldrh	r1, [r7, #4]
 80008d8:	88f8      	ldrh	r0, [r7, #6]
 80008da:	f000 fd95 	bl	8001408 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 80008de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008e0:	8afa      	ldrh	r2, [r7, #22]
 80008e2:	8839      	ldrh	r1, [r7, #0]
 80008e4:	88f8      	ldrh	r0, [r7, #6]
 80008e6:	f000 fd8f 	bl	8001408 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80008ea:	7cbb      	ldrb	r3, [r7, #18]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80008f0:	883a      	ldrh	r2, [r7, #0]
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	82bb      	strh	r3, [r7, #20]
 80008f8:	e003      	b.n	8000902 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80008fa:	88ba      	ldrh	r2, [r7, #4]
 80008fc:	883b      	ldrh	r3, [r7, #0]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 8000902:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000904:	8aba      	ldrh	r2, [r7, #20]
 8000906:	88b9      	ldrh	r1, [r7, #4]
 8000908:	88f8      	ldrh	r0, [r7, #6]
 800090a:	f000 fdc1 	bl	8001490 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 800090e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000910:	8aba      	ldrh	r2, [r7, #20]
 8000912:	88b9      	ldrh	r1, [r7, #4]
 8000914:	8878      	ldrh	r0, [r7, #2]
 8000916:	f000 fdbb 	bl	8001490 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 800091a:	8afb      	ldrh	r3, [r7, #22]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <ILI9341_DrawHollowRectangleCoord+0xee>
 8000920:	8abb      	ldrh	r3, [r7, #20]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d005      	beq.n	8000932 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 8000926:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000928:	8839      	ldrh	r1, [r7, #0]
 800092a:	887b      	ldrh	r3, [r7, #2]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fca9 	bl	8001284 <ILI9341_DrawPixel>
	}
}
 8000932:	bf00      	nop
 8000934:	371c      	adds	r7, #28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd90      	pop	{r4, r7, pc}

0800093a <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b089      	sub	sp, #36	; 0x24
 800093e:	af02      	add	r7, sp, #8
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	461a      	mov	r2, r3
 8000948:	4623      	mov	r3, r4
 800094a:	80fb      	strh	r3, [r7, #6]
 800094c:	4603      	mov	r3, r0
 800094e:	80bb      	strh	r3, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
 8000954:	4613      	mov	r3, r2
 8000956:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000974:	887a      	ldrh	r2, [r7, #2]
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da01      	bge.n	8000986 <ILI9341_DrawFilledRectangleCoord+0x4c>
 8000982:	2301      	movs	r3, #1
 8000984:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 800098a:	883a      	ldrh	r2, [r7, #0]
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	da01      	bge.n	800099c <ILI9341_DrawFilledRectangleCoord+0x62>
 8000998:	2301      	movs	r3, #1
 800099a:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 800099c:	7cfb      	ldrb	r3, [r7, #19]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d106      	bne.n	80009b0 <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 80009a2:	887a      	ldrh	r2, [r7, #2]
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	823b      	strh	r3, [r7, #16]
 80009ae:	e005      	b.n	80009bc <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 80009b0:	88fa      	ldrh	r2, [r7, #6]
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 80009bc:	7cbb      	ldrb	r3, [r7, #18]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d106      	bne.n	80009d0 <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 80009c2:	883a      	ldrh	r2, [r7, #0]
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 80009ca:	88bb      	ldrh	r3, [r7, #4]
 80009cc:	81fb      	strh	r3, [r7, #14]
 80009ce:	e005      	b.n	80009dc <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 80009d0:	88ba      	ldrh	r2, [r7, #4]
 80009d2:	883b      	ldrh	r3, [r7, #0]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 80009d8:	883b      	ldrh	r3, [r7, #0]
 80009da:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 80009dc:	8abc      	ldrh	r4, [r7, #20]
 80009de:	8afa      	ldrh	r2, [r7, #22]
 80009e0:	89f9      	ldrh	r1, [r7, #14]
 80009e2:	8a38      	ldrh	r0, [r7, #16]
 80009e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	4623      	mov	r3, r4
 80009ea:	f000 fcb1 	bl	8001350 <ILI9341_DrawRectangle>
}
 80009ee:	bf00      	nop
 80009f0:	371c      	adds	r7, #28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}

080009f6 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80009f6:	b590      	push	{r4, r7, lr}
 80009f8:	b08d      	sub	sp, #52	; 0x34
 80009fa:	af02      	add	r7, sp, #8
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	4611      	mov	r1, r2
 8000a00:	461a      	mov	r2, r3
 8000a02:	4603      	mov	r3, r0
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	460b      	mov	r3, r1
 8000a08:	81bb      	strh	r3, [r7, #12]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b1e      	cmp	r3, #30
 8000a12:	d964      	bls.n	8000ade <ILI9341_DrawChar+0xe8>
 8000a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db60      	blt.n	8000ade <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3301      	adds	r3, #1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3303      	adds	r3, #3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3b20      	subs	r3, #32
 8000a3e:	7ffa      	ldrb	r2, [r7, #31]
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	3304      	adds	r3, #4
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000a4c:	7fbb      	ldrb	r3, [r7, #30]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	7f7b      	ldrb	r3, [r7, #29]
 8000a52:	b29c      	uxth	r4, r3
 8000a54:	88f9      	ldrh	r1, [r7, #6]
 8000a56:	89b8      	ldrh	r0, [r7, #12]
 8000a58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	4623      	mov	r3, r4
 8000a5e:	f000 fc77 	bl	8001350 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	e035      	b.n	8000ad4 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
 8000a6c:	e02b      	b.n	8000ac6 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000a6e:	7f3b      	ldrb	r3, [r7, #28]
 8000a70:	6a3a      	ldr	r2, [r7, #32]
 8000a72:	fb03 f202 	mul.w	r2, r3, r2
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	10db      	asrs	r3, r3, #3
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	4413      	add	r3, r2
 8000a80:	3301      	adds	r3, #1
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	f003 0307 	and.w	r3, r3, #7
 8000a90:	2201      	movs	r2, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000a98:	7dfa      	ldrb	r2, [r7, #23]
 8000a9a:	7dbb      	ldrb	r3, [r7, #22]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00d      	beq.n	8000ac0 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	89bb      	ldrh	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b298      	uxth	r0, r3
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000aba:	4619      	mov	r1, r3
 8000abc:	f000 fbe2 	bl	8001284 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	7fbb      	ldrb	r3, [r7, #30]
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dbcf      	blt.n	8000a6e <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad4:	7f7b      	ldrb	r3, [r7, #29]
 8000ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbc5      	blt.n	8000a68 <ILI9341_DrawChar+0x72>
 8000adc:	e000      	b.n	8000ae0 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000ade:	bf00      	nop
			}
		}
	}
}
 8000ae0:	372c      	adds	r7, #44	; 0x2c
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}

08000ae6 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b08a      	sub	sp, #40	; 0x28
 8000aea:	af02      	add	r7, sp, #8
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	4611      	mov	r1, r2
 8000af2:	461a      	mov	r2, r3
 8000af4:	460b      	mov	r3, r1
 8000af6:	80fb      	strh	r3, [r7, #6]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	3301      	adds	r3, #1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000b0a:	e02d      	b.n	8000b68 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	7818      	ldrb	r0, [r3, #0]
 8000b10:	88b9      	ldrh	r1, [r7, #4]
 8000b12:	88fa      	ldrh	r2, [r7, #6]
 8000b14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	f7ff ff69 	bl	80009f6 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3b20      	subs	r3, #32
 8000b2a:	7ffa      	ldrb	r2, [r7, #31]
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	3304      	adds	r3, #4
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	1c9a      	adds	r2, r3, #2
 8000b42:	7fbb      	ldrb	r3, [r7, #30]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	da07      	bge.n	8000b58 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3302      	adds	r3, #2
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	e004      	b.n	8000b62 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000b58:	7fbb      	ldrb	r3, [r7, #30]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	4413      	add	r3, r2
 8000b60:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1cd      	bne.n	8000b0c <ILI9341_DrawText+0x26>
	}
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <ILI9341_DrawImage>:

void ILI9341_DrawImage(const uint8_t* image, uint8_t orientation)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
	if(orientation == SCREEN_HORIZONTAL_1)
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d10a      	bne.n	8000ba2 <ILI9341_DrawImage+0x28>
	{
		ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 fa69 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000b92:	23f0      	movs	r3, #240	; 0xf0
 8000b94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8e4 	bl	8000d68 <ILI9341_SetAddress>
 8000ba0:	e028      	b.n	8000bf4 <ILI9341_DrawImage+0x7a>
	}
	else if(orientation == SCREEN_HORIZONTAL_2)
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d10a      	bne.n	8000bbe <ILI9341_DrawImage+0x44>
	{
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 fa5b 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8000bae:	23f0      	movs	r3, #240	; 0xf0
 8000bb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f8d6 	bl	8000d68 <ILI9341_SetAddress>
 8000bbc:	e01a      	b.n	8000bf4 <ILI9341_DrawImage+0x7a>
	}
	else if(orientation == SCREEN_VERTICAL_2)
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d10a      	bne.n	8000bda <ILI9341_DrawImage+0x60>
	{
		ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f000 fa4d 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000bca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bce:	22f0      	movs	r2, #240	; 0xf0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f8c8 	bl	8000d68 <ILI9341_SetAddress>
 8000bd8:	e00c      	b.n	8000bf4 <ILI9341_DrawImage+0x7a>
	}
	else if(orientation == SCREEN_VERTICAL_1)
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <ILI9341_DrawImage+0x7a>
	{
		ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f000 fa3f 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_SetAddress(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8000be6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bea:	22f0      	movs	r2, #240	; 0xf0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f8ba 	bl	8000d68 <ILI9341_SetAddress>
	}

	uint32_t counter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	e011      	b.n	8000c22 <ILI9341_DrawImage+0xa8>
	{
		ILI9341_WriteBuffer((uint8_t*)(image + counter), BURST_MAX_SIZE);
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f891 	bl	8000d30 <ILI9341_WriteBuffer>
		counter += BURST_MAX_SIZE;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000c14:	60fb      	str	r3, [r7, #12]

		/* DMA Tx is too fast, It needs some delay */
		DelayUs(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fcb0 	bl	800057c <DelayUs>
	for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000c28:	d9e9      	bls.n	8000bfe <ILI9341_DrawImage+0x84>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_SPI_TxCpltCallback+0x24>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d104      	bne.n	8000c4e <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2102      	movs	r1, #2
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <HAL_SPI_TxCpltCallback+0x28>)
 8000c4a:	f002 fa85 	bl	8003158 <HAL_GPIO_WritePin>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000007c 	.word	0x2000007c
 8000c5c:	40020800 	.word	0x40020800

08000c60 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000c6a:	bf00      	nop
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <ILI9341_SPI_Tx+0x30>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d1f8      	bne.n	8000c6c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <ILI9341_SPI_Tx+0x30>)
 8000c82:	f003 f873 	bl	8003d6c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000007c 	.word	0x2000007c

08000c94 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ca0:	bf00      	nop
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <ILI9341_SPI_TxBuffer+0x30>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d1f8      	bne.n	8000ca2 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <ILI9341_SPI_TxBuffer+0x30>)
 8000cb8:	f003 f858 	bl	8003d6c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000007c 	.word	0x2000007c

08000cc8 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <ILI9341_WriteCommand+0x30>)
 8000cd8:	f002 fa3e 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <ILI9341_WriteCommand+0x30>)
 8000ce2:	f002 fa39 	bl	8003158 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffb9 	bl	8000c60 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40020800 	.word	0x40020800

08000cfc <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000d06:	2201      	movs	r2, #1
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4808      	ldr	r0, [pc, #32]	; (8000d2c <ILI9341_WriteData+0x30>)
 8000d0c:	f002 fa24 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000d10:	2200      	movs	r2, #0
 8000d12:	2102      	movs	r1, #2
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <ILI9341_WriteData+0x30>)
 8000d16:	f002 fa1f 	bl	8003158 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff9f 	bl	8000c60 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40020800 	.word	0x40020800

08000d30 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4808      	ldr	r0, [pc, #32]	; (8000d64 <ILI9341_WriteBuffer+0x34>)
 8000d42:	f002 fa09 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000d46:	2200      	movs	r2, #0
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <ILI9341_WriteBuffer+0x34>)
 8000d4c:	f002 fa04 	bl	8003158 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	4619      	mov	r1, r3
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff9d 	bl	8000c94 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020800 	.word	0x40020800

08000d68 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4623      	mov	r3, r4
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	807b      	strh	r3, [r7, #2]
 8000d82:	4613      	mov	r3, r2
 8000d84:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000da6:	202a      	movs	r0, #42	; 0x2a
 8000da8:	f7ff ff8e 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2104      	movs	r1, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ffbc 	bl	8000d30 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000db8:	88bb      	ldrh	r3, [r7, #4]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000dc8:	883b      	ldrh	r3, [r7, #0]
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000dd2:	883b      	ldrh	r3, [r7, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000dd8:	202b      	movs	r0, #43	; 0x2b
 8000dda:	f7ff ff75 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2104      	movs	r1, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ffa3 	bl	8000d30 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000dea:	202c      	movs	r0, #44	; 0x2c
 8000dec:	f7ff ff6c 	bl	8000cc8 <ILI9341_WriteCommand>
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd90      	pop	{r4, r7, pc}

08000df8 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2108      	movs	r1, #8
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <ILI9341_Reset+0x3c>)
 8000e02:	f002 f9a9 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e06:	200a      	movs	r0, #10
 8000e08:	f001 fb5a 	bl	80024c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <ILI9341_Reset+0x3c>)
 8000e12:	f002 f9a1 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e16:	200a      	movs	r0, #10
 8000e18:	f001 fb52 	bl	80024c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2108      	movs	r1, #8
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <ILI9341_Reset+0x3c>)
 8000e22:	f002 f999 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000e26:	2201      	movs	r2, #1
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4802      	ldr	r0, [pc, #8]	; (8000e34 <ILI9341_Reset+0x3c>)
 8000e2c:	f002 f994 	bl	8003158 <HAL_GPIO_WritePin>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020800 	.word	0x40020800

08000e38 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <ILI9341_Enable+0x14>)
 8000e42:	f002 f989 	bl	8003158 <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020800 	.word	0x40020800

08000e50 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000e54:	f7ff fff0 	bl	8000e38 <ILI9341_Enable>
	ILI9341_Reset();
 8000e58:	f7ff ffce 	bl	8000df8 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff33 	bl	8000cc8 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f001 fb2c 	bl	80024c0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000e68:	20cb      	movs	r0, #203	; 0xcb
 8000e6a:	f7ff ff2d 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000e6e:	2039      	movs	r0, #57	; 0x39
 8000e70:	f7ff ff44 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000e74:	202c      	movs	r0, #44	; 0x2c
 8000e76:	f7ff ff41 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff ff3e 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000e80:	2034      	movs	r0, #52	; 0x34
 8000e82:	f7ff ff3b 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff ff38 	bl	8000cfc <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000e8c:	20cf      	movs	r0, #207	; 0xcf
 8000e8e:	f7ff ff1b 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ff32 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000e98:	20c1      	movs	r0, #193	; 0xc1
 8000e9a:	f7ff ff2f 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000e9e:	2030      	movs	r0, #48	; 0x30
 8000ea0:	f7ff ff2c 	bl	8000cfc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000ea4:	20e8      	movs	r0, #232	; 0xe8
 8000ea6:	f7ff ff0f 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000eaa:	2085      	movs	r0, #133	; 0x85
 8000eac:	f7ff ff26 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff ff23 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000eb6:	2078      	movs	r0, #120	; 0x78
 8000eb8:	f7ff ff20 	bl	8000cfc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000ebc:	20ea      	movs	r0, #234	; 0xea
 8000ebe:	f7ff ff03 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ff1a 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff ff17 	bl	8000cfc <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000ece:	20ed      	movs	r0, #237	; 0xed
 8000ed0:	f7ff fefa 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f7ff ff11 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f7ff ff0e 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000ee0:	2012      	movs	r0, #18
 8000ee2:	f7ff ff0b 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000ee6:	2081      	movs	r0, #129	; 0x81
 8000ee8:	f7ff ff08 	bl	8000cfc <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000eec:	20f7      	movs	r0, #247	; 0xf7
 8000eee:	f7ff feeb 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	f7ff ff02 	bl	8000cfc <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000ef8:	20c0      	movs	r0, #192	; 0xc0
 8000efa:	f7ff fee5 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000efe:	2023      	movs	r0, #35	; 0x23
 8000f00:	f7ff fefc 	bl	8000cfc <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000f04:	20c1      	movs	r0, #193	; 0xc1
 8000f06:	f7ff fedf 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f7ff fef6 	bl	8000cfc <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000f10:	20c5      	movs	r0, #197	; 0xc5
 8000f12:	f7ff fed9 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000f16:	203e      	movs	r0, #62	; 0x3e
 8000f18:	f7ff fef0 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f7ff feed 	bl	8000cfc <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000f22:	20c7      	movs	r0, #199	; 0xc7
 8000f24:	f7ff fed0 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000f28:	2086      	movs	r0, #134	; 0x86
 8000f2a:	f7ff fee7 	bl	8000cfc <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000f2e:	2036      	movs	r0, #54	; 0x36
 8000f30:	f7ff feca 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000f34:	2048      	movs	r0, #72	; 0x48
 8000f36:	f7ff fee1 	bl	8000cfc <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000f3a:	203a      	movs	r0, #58	; 0x3a
 8000f3c:	f7ff fec4 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000f40:	2055      	movs	r0, #85	; 0x55
 8000f42:	f7ff fedb 	bl	8000cfc <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000f46:	20b1      	movs	r0, #177	; 0xb1
 8000f48:	f7ff febe 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fed5 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000f52:	2018      	movs	r0, #24
 8000f54:	f7ff fed2 	bl	8000cfc <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000f58:	20b6      	movs	r0, #182	; 0xb6
 8000f5a:	f7ff feb5 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000f5e:	2008      	movs	r0, #8
 8000f60:	f7ff fecc 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000f64:	2082      	movs	r0, #130	; 0x82
 8000f66:	f7ff fec9 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000f6a:	2027      	movs	r0, #39	; 0x27
 8000f6c:	f7ff fec6 	bl	8000cfc <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000f70:	20f2      	movs	r0, #242	; 0xf2
 8000f72:	f7ff fea9 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff fec0 	bl	8000cfc <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000f7c:	2026      	movs	r0, #38	; 0x26
 8000f7e:	f7ff fea3 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff feba 	bl	8000cfc <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000f88:	20e0      	movs	r0, #224	; 0xe0
 8000f8a:	f7ff fe9d 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f7ff feb4 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000f94:	2031      	movs	r0, #49	; 0x31
 8000f96:	f7ff feb1 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000f9a:	202b      	movs	r0, #43	; 0x2b
 8000f9c:	f7ff feae 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000fa0:	200c      	movs	r0, #12
 8000fa2:	f7ff feab 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000fa6:	200e      	movs	r0, #14
 8000fa8:	f7ff fea8 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000fac:	2008      	movs	r0, #8
 8000fae:	f7ff fea5 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000fb2:	204e      	movs	r0, #78	; 0x4e
 8000fb4:	f7ff fea2 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000fb8:	20f1      	movs	r0, #241	; 0xf1
 8000fba:	f7ff fe9f 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000fbe:	2037      	movs	r0, #55	; 0x37
 8000fc0:	f7ff fe9c 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000fc4:	2007      	movs	r0, #7
 8000fc6:	f7ff fe99 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000fca:	2010      	movs	r0, #16
 8000fcc:	f7ff fe96 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f7ff fe93 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000fd6:	200e      	movs	r0, #14
 8000fd8:	f7ff fe90 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000fdc:	2009      	movs	r0, #9
 8000fde:	f7ff fe8d 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fe8a 	bl	8000cfc <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000fe8:	20e1      	movs	r0, #225	; 0xe1
 8000fea:	f7ff fe6d 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fe84 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ff4:	200e      	movs	r0, #14
 8000ff6:	f7ff fe81 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000ffa:	2014      	movs	r0, #20
 8000ffc:	f7ff fe7e 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001000:	2003      	movs	r0, #3
 8001002:	f7ff fe7b 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001006:	2011      	movs	r0, #17
 8001008:	f7ff fe78 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800100c:	2007      	movs	r0, #7
 800100e:	f7ff fe75 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001012:	2031      	movs	r0, #49	; 0x31
 8001014:	f7ff fe72 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001018:	20c1      	movs	r0, #193	; 0xc1
 800101a:	f7ff fe6f 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800101e:	2048      	movs	r0, #72	; 0x48
 8001020:	f7ff fe6c 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001024:	2008      	movs	r0, #8
 8001026:	f7ff fe69 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800102a:	200f      	movs	r0, #15
 800102c:	f7ff fe66 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001030:	200c      	movs	r0, #12
 8001032:	f7ff fe63 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001036:	2031      	movs	r0, #49	; 0x31
 8001038:	f7ff fe60 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800103c:	2036      	movs	r0, #54	; 0x36
 800103e:	f7ff fe5d 	bl	8000cfc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001042:	200f      	movs	r0, #15
 8001044:	f7ff fe5a 	bl	8000cfc <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001048:	2011      	movs	r0, #17
 800104a:	f7ff fe3d 	bl	8000cc8 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f001 fa36 	bl	80024c0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001054:	2029      	movs	r0, #41	; 0x29
 8001056:	f7ff fe37 	bl	8000cc8 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f802 	bl	8001064 <ILI9341_SetRotation>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800106e:	2036      	movs	r0, #54	; 0x36
 8001070:	f7ff fe2a 	bl	8000cc8 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f001 fa23 	bl	80024c0 <HAL_Delay>

	switch(rotation)
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d837      	bhi.n	80010f0 <ILI9341_SetRotation+0x8c>
 8001080:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <ILI9341_SetRotation+0x24>)
 8001082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001086:	bf00      	nop
 8001088:	08001099 	.word	0x08001099
 800108c:	080010af 	.word	0x080010af
 8001090:	080010c5 	.word	0x080010c5
 8001094:	080010db 	.word	0x080010db
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001098:	2048      	movs	r0, #72	; 0x48
 800109a:	f7ff fe2f 	bl	8000cfc <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <ILI9341_SetRotation+0x98>)
 80010a0:	22f0      	movs	r2, #240	; 0xf0
 80010a2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <ILI9341_SetRotation+0x9c>)
 80010a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010aa:	801a      	strh	r2, [r3, #0]
		break;
 80010ac:	e021      	b.n	80010f2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80010ae:	2028      	movs	r0, #40	; 0x28
 80010b0:	f7ff fe24 	bl	8000cfc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <ILI9341_SetRotation+0x98>)
 80010b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010ba:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <ILI9341_SetRotation+0x9c>)
 80010be:	22f0      	movs	r2, #240	; 0xf0
 80010c0:	801a      	strh	r2, [r3, #0]
		break;
 80010c2:	e016      	b.n	80010f2 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80010c4:	2088      	movs	r0, #136	; 0x88
 80010c6:	f7ff fe19 	bl	8000cfc <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <ILI9341_SetRotation+0x98>)
 80010cc:	22f0      	movs	r2, #240	; 0xf0
 80010ce:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <ILI9341_SetRotation+0x9c>)
 80010d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010d6:	801a      	strh	r2, [r3, #0]
		break;
 80010d8:	e00b      	b.n	80010f2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80010da:	20e8      	movs	r0, #232	; 0xe8
 80010dc:	f7ff fe0e 	bl	8000cfc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <ILI9341_SetRotation+0x98>)
 80010e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010e6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <ILI9341_SetRotation+0x9c>)
 80010ea:	22f0      	movs	r2, #240	; 0xf0
 80010ec:	801a      	strh	r2, [r3, #0]
		break;
 80010ee:	e000      	b.n	80010f2 <ILI9341_SetRotation+0x8e>
	default:
		break;
 80010f0:	bf00      	nop
	}
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000002 	.word	0x20000002
 8001100:	20000000 	.word	0x20000000

08001104 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001108:	b08d      	sub	sp, #52	; 0x34
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	6039      	str	r1, [r7, #0]
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	466b      	mov	r3, sp
 8001114:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001122:	d202      	bcs.n	800112a <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001128:	e002      	b.n	8001130 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800112a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2104      	movs	r1, #4
 8001134:	483e      	ldr	r0, [pc, #248]	; (8001230 <ILI9341_DrawColorBurst+0x12c>)
 8001136:	f002 f80f 	bl	8003158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2102      	movs	r1, #2
 800113e:	483c      	ldr	r0, [pc, #240]	; (8001230 <ILI9341_DrawColorBurst+0x12c>)
 8001140:	f002 f80a 	bl	8003158 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	b29b      	uxth	r3, r3
 800114a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 800114e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001150:	460b      	mov	r3, r1
 8001152:	3b01      	subs	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	2300      	movs	r3, #0
 8001158:	4688      	mov	r8, r1
 800115a:	4699      	mov	r9, r3
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001168:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800116c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001170:	2300      	movs	r3, #0
 8001172:	460c      	mov	r4, r1
 8001174:	461d      	mov	r5, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	00eb      	lsls	r3, r5, #3
 8001180:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001184:	00e2      	lsls	r2, r4, #3
 8001186:	1dcb      	adds	r3, r1, #7
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	ebad 0d03 	sub.w	sp, sp, r3
 8001190:	466b      	mov	r3, sp
 8001192:	3300      	adds	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
 800119a:	e00e      	b.n	80011ba <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	4413      	add	r3, r2
 80011a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011a6:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	3301      	adds	r3, #1
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	3302      	adds	r3, #2
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3ec      	bcc.n	800119c <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80011da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011dc:	fb01 f202 	mul.w	r2, r1, r2
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d010      	beq.n	800120c <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	e009      	b.n	8001204 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	230a      	movs	r3, #10
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	480e      	ldr	r0, [pc, #56]	; (8001234 <ILI9341_DrawColorBurst+0x130>)
 80011fa:	f002 fc74 	bl	8003ae6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3f1      	bcc.n	80011f0 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	b29a      	uxth	r2, r3
 8001210:	230a      	movs	r3, #10
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <ILI9341_DrawColorBurst+0x130>)
 8001216:	f002 fc66 	bl	8003ae6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2102      	movs	r1, #2
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <ILI9341_DrawColorBurst+0x12c>)
 8001220:	f001 ff9a 	bl	8003158 <HAL_GPIO_WritePin>
 8001224:	46b5      	mov	sp, r6
}
 8001226:	bf00      	nop
 8001228:	3734      	adds	r7, #52	; 0x34
 800122a:	46bd      	mov	sp, r7
 800122c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001230:	40020800 	.word	0x40020800
 8001234:	2000007c 	.word	0x2000007c

08001238 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <ILI9341_FillScreen+0x44>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <ILI9341_FillScreen+0x48>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2100      	movs	r1, #0
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fd89 	bl	8000d68 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <ILI9341_FillScreen+0x44>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <ILI9341_FillScreen+0x48>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	461a      	mov	r2, r3
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff48 	bl	8001104 <ILI9341_DrawColorBurst>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000002 	.word	0x20000002
 8001280:	20000000 	.word	0x20000000

08001284 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
 800128e:	460b      	mov	r3, r1
 8001290:	80bb      	strh	r3, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <ILI9341_DrawPixel+0xc4>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d24d      	bcs.n	800133e <ILI9341_DrawPixel+0xba>
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <ILI9341_DrawPixel+0xc8>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	88ba      	ldrh	r2, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d247      	bcs.n	800133e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	753b      	strb	r3, [r7, #20]
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	757b      	strb	r3, [r7, #21]
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	3301      	adds	r3, #1
 80012c2:	121b      	asrs	r3, r3, #8
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	75bb      	strb	r3, [r7, #22]
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	743b      	strb	r3, [r7, #16]
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	747b      	strb	r3, [r7, #17]
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	121b      	asrs	r3, r3, #8
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	74bb      	strb	r3, [r7, #18]
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	733b      	strb	r3, [r7, #12]
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001306:	202a      	movs	r0, #42	; 0x2a
 8001308:	f7ff fcde 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2104      	movs	r1, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fd0c 	bl	8000d30 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001318:	202b      	movs	r0, #43	; 0x2b
 800131a:	f7ff fcd5 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2104      	movs	r1, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd03 	bl	8000d30 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800132a:	202c      	movs	r0, #44	; 0x2c
 800132c:	f7ff fccc 	bl	8000cc8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fcfa 	bl	8000d30 <ILI9341_WriteBuffer>
 800133c:	e000      	b.n	8001340 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800133e:	bf00      	nop
}
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000002 	.word	0x20000002
 800134c:	20000000 	.word	0x20000000

08001350 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	4603      	mov	r3, r0
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]
 800136a:	4613      	mov	r3, r2
 800136c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <ILI9341_DrawRectangle+0xb0>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	88fa      	ldrh	r2, [r7, #6]
 8001376:	429a      	cmp	r2, r3
 8001378:	d23d      	bcs.n	80013f6 <ILI9341_DrawRectangle+0xa6>
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <ILI9341_DrawRectangle+0xb4>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d237      	bcs.n	80013f6 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001386:	88fa      	ldrh	r2, [r7, #6]
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	4413      	add	r3, r2
 800138c:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <ILI9341_DrawRectangle+0xb0>)
 800138e:	8812      	ldrh	r2, [r2, #0]
 8001390:	b292      	uxth	r2, r2
 8001392:	4293      	cmp	r3, r2
 8001394:	dd05      	ble.n	80013a2 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <ILI9341_DrawRectangle+0xb0>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29a      	uxth	r2, r3
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80013a2:	88ba      	ldrh	r2, [r7, #4]
 80013a4:	883b      	ldrh	r3, [r7, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a16      	ldr	r2, [pc, #88]	; (8001404 <ILI9341_DrawRectangle+0xb4>)
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	b292      	uxth	r2, r2
 80013ae:	4293      	cmp	r3, r2
 80013b0:	dd05      	ble.n	80013be <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <ILI9341_DrawRectangle+0xb4>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4413      	add	r3, r2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29c      	uxth	r4, r3
 80013ca:	88ba      	ldrh	r2, [r7, #4]
 80013cc:	883b      	ldrh	r3, [r7, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	88b9      	ldrh	r1, [r7, #4]
 80013d8:	88f8      	ldrh	r0, [r7, #6]
 80013da:	4622      	mov	r2, r4
 80013dc:	f7ff fcc4 	bl	8000d68 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80013e0:	883b      	ldrh	r3, [r7, #0]
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	8b3b      	ldrh	r3, [r7, #24]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe88 	bl	8001104 <ILI9341_DrawColorBurst>
 80013f4:	e000      	b.n	80013f8 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013f6:	bf00      	nop
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000002 	.word	0x20000002
 8001404:	20000000 	.word	0x20000000

08001408 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	80fb      	strh	r3, [r7, #6]
 800141a:	4603      	mov	r3, r0
 800141c:	80bb      	strh	r3, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	807b      	strh	r3, [r7, #2]
 8001422:	4613      	mov	r3, r2
 8001424:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <ILI9341_DrawHLine+0x80>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	429a      	cmp	r2, r3
 8001430:	d225      	bcs.n	800147e <ILI9341_DrawHLine+0x76>
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <ILI9341_DrawHLine+0x84>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	88ba      	ldrh	r2, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d21f      	bcs.n	800147e <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4413      	add	r3, r2
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <ILI9341_DrawHLine+0x80>)
 8001446:	8812      	ldrh	r2, [r2, #0]
 8001448:	b292      	uxth	r2, r2
 800144a:	4293      	cmp	r3, r2
 800144c:	dd05      	ble.n	800145a <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <ILI9341_DrawHLine+0x80>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29a      	uxth	r2, r3
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 800145a:	88fa      	ldrh	r2, [r7, #6]
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	4413      	add	r3, r2
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	88b9      	ldrh	r1, [r7, #4]
 800146a:	88f8      	ldrh	r0, [r7, #6]
 800146c:	f7ff fc7c 	bl	8000d68 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001470:	887a      	ldrh	r2, [r7, #2]
 8001472:	883b      	ldrh	r3, [r7, #0]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe44 	bl	8001104 <ILI9341_DrawColorBurst>
 800147c:	e000      	b.n	8001480 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800147e:	bf00      	nop
}
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	20000002 	.word	0x20000002
 800148c:	20000000 	.word	0x20000000

08001490 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4603      	mov	r3, r0
 80014a4:	80bb      	strh	r3, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	807b      	strh	r3, [r7, #2]
 80014aa:	4613      	mov	r3, r2
 80014ac:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <ILI9341_DrawVLine+0x80>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d225      	bcs.n	8001506 <ILI9341_DrawVLine+0x76>
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <ILI9341_DrawVLine+0x84>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	88ba      	ldrh	r2, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d21f      	bcs.n	8001506 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80014c6:	88ba      	ldrh	r2, [r7, #4]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a11      	ldr	r2, [pc, #68]	; (8001514 <ILI9341_DrawVLine+0x84>)
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	b292      	uxth	r2, r2
 80014d2:	4293      	cmp	r3, r2
 80014d4:	dd05      	ble.n	80014e2 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <ILI9341_DrawVLine+0x84>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80014e2:	88ba      	ldrh	r2, [r7, #4]
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	88fa      	ldrh	r2, [r7, #6]
 80014f0:	88b9      	ldrh	r1, [r7, #4]
 80014f2:	88f8      	ldrh	r0, [r7, #6]
 80014f4:	f7ff fc38 	bl	8000d68 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 80014f8:	887a      	ldrh	r2, [r7, #2]
 80014fa:	883b      	ldrh	r3, [r7, #0]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe00 	bl	8001104 <ILI9341_DrawColorBurst>
 8001504:	e000      	b.n	8001508 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001506:	bf00      	nop
}
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	20000002 	.word	0x20000002
 8001514:	20000000 	.word	0x20000000

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b09f      	sub	sp, #124	; 0x7c
 800151c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f000 ff5d 	bl	80023dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 fcfb 	bl	8001f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 fdb7 	bl	8002098 <MX_GPIO_Init>
  MX_DMA_Init();
 800152a:	f000 fd95 	bl	8002058 <MX_DMA_Init>
  MX_SPI1_Init();
 800152e:	f000 fd5d 	bl	8001fec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001532:	f7ff fc8d 	bl	8000e50 <ILI9341_Init>

    /* USER CODE BEGIN 3 */


		/* COUNTING MULTIPLE SEGMENTS */
		ILI9341_FillScreen(WHITE);
 8001536:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800153a:	f7ff fe7d 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800153e:	2003      	movs	r0, #3
 8001540:	f7ff fd90 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Counting multiple segments at once", FONT2, 10, 10, BLACK, WHITE);
 8001544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	2300      	movs	r3, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	230a      	movs	r3, #10
 8001550:	220a      	movs	r2, #10
 8001552:	499f      	ldr	r1, [pc, #636]	; (80017d0 <main+0x2b8>)
 8001554:	489f      	ldr	r0, [pc, #636]	; (80017d4 <main+0x2bc>)
 8001556:	f7ff fac6 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 800155a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155e:	f000 ffaf 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 8001562:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001566:	f7ff fe67 	bl	8001238 <ILI9341_FillScreen>

		for(uint16_t i = 0; i <= 10; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001570:	e087      	b.n	8001682 <main+0x16a>
		{
			sprintf(BufferText, "Counting: %d", i);
 8001572:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001576:	461a      	mov	r2, r3
 8001578:	4997      	ldr	r1, [pc, #604]	; (80017d8 <main+0x2c0>)
 800157a:	4898      	ldr	r0, [pc, #608]	; (80017dc <main+0x2c4>)
 800157c:	f002 ff22 	bl	80043c4 <siprintf>
			ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 8001580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	2300      	movs	r3, #0
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	230a      	movs	r3, #10
 800158c:	220a      	movs	r2, #10
 800158e:	4994      	ldr	r1, [pc, #592]	; (80017e0 <main+0x2c8>)
 8001590:	4892      	ldr	r0, [pc, #584]	; (80017dc <main+0x2c4>)
 8001592:	f7ff faa8 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 8001596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	231f      	movs	r3, #31
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	231e      	movs	r3, #30
 80015a2:	220a      	movs	r2, #10
 80015a4:	498e      	ldr	r1, [pc, #568]	; (80017e0 <main+0x2c8>)
 80015a6:	488d      	ldr	r0, [pc, #564]	; (80017dc <main+0x2c4>)
 80015a8:	f7ff fa9d 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 80015ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2332      	movs	r3, #50	; 0x32
 80015ba:	220a      	movs	r2, #10
 80015bc:	4988      	ldr	r1, [pc, #544]	; (80017e0 <main+0x2c8>)
 80015be:	4887      	ldr	r0, [pc, #540]	; (80017dc <main+0x2c4>)
 80015c0:	f7ff fa91 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 80015c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2346      	movs	r3, #70	; 0x46
 80015d2:	220a      	movs	r2, #10
 80015d4:	4982      	ldr	r1, [pc, #520]	; (80017e0 <main+0x2c8>)
 80015d6:	4881      	ldr	r0, [pc, #516]	; (80017dc <main+0x2c4>)
 80015d8:	f7ff fa85 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 90, BLACK, WHITE);
 80015dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	235a      	movs	r3, #90	; 0x5a
 80015e8:	220a      	movs	r2, #10
 80015ea:	497d      	ldr	r1, [pc, #500]	; (80017e0 <main+0x2c8>)
 80015ec:	487b      	ldr	r0, [pc, #492]	; (80017dc <main+0x2c4>)
 80015ee:	f7ff fa7a 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 110, BLUE, WHITE);
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	231f      	movs	r3, #31
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	236e      	movs	r3, #110	; 0x6e
 80015fe:	220a      	movs	r2, #10
 8001600:	4977      	ldr	r1, [pc, #476]	; (80017e0 <main+0x2c8>)
 8001602:	4876      	ldr	r0, [pc, #472]	; (80017dc <main+0x2c4>)
 8001604:	f7ff fa6f 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 130, RED, WHITE);
 8001608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2382      	movs	r3, #130	; 0x82
 8001616:	220a      	movs	r2, #10
 8001618:	4971      	ldr	r1, [pc, #452]	; (80017e0 <main+0x2c8>)
 800161a:	4870      	ldr	r0, [pc, #448]	; (80017dc <main+0x2c4>)
 800161c:	f7ff fa63 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 150, GREEN, WHITE);
 8001620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2396      	movs	r3, #150	; 0x96
 800162e:	220a      	movs	r2, #10
 8001630:	496b      	ldr	r1, [pc, #428]	; (80017e0 <main+0x2c8>)
 8001632:	486a      	ldr	r0, [pc, #424]	; (80017dc <main+0x2c4>)
 8001634:	f7ff fa57 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001638:	2300      	movs	r3, #0
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	23aa      	movs	r3, #170	; 0xaa
 8001644:	220a      	movs	r2, #10
 8001646:	4966      	ldr	r1, [pc, #408]	; (80017e0 <main+0x2c8>)
 8001648:	4864      	ldr	r0, [pc, #400]	; (80017dc <main+0x2c4>)
 800164a:	f7ff fa4c 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	231f      	movs	r3, #31
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	23be      	movs	r3, #190	; 0xbe
 8001658:	220a      	movs	r2, #10
 800165a:	4961      	ldr	r1, [pc, #388]	; (80017e0 <main+0x2c8>)
 800165c:	485f      	ldr	r0, [pc, #380]	; (80017dc <main+0x2c4>)
 800165e:	f7ff fa42 	bl	8000ae6 <ILI9341_DrawText>
			ILI9341_DrawText(BufferText, FONT3, 10, 210, RED, BLACK);
 8001662:	2300      	movs	r3, #0
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	23d2      	movs	r3, #210	; 0xd2
 800166e:	220a      	movs	r2, #10
 8001670:	495b      	ldr	r1, [pc, #364]	; (80017e0 <main+0x2c8>)
 8001672:	485a      	ldr	r0, [pc, #360]	; (80017dc <main+0x2c4>)
 8001674:	f7ff fa37 	bl	8000ae6 <ILI9341_DrawText>
		for(uint16_t i = 0; i <= 10; i++)
 8001678:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800167c:	3301      	adds	r3, #1
 800167e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001682:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001686:	2b0a      	cmp	r3, #10
 8001688:	f67f af73 	bls.w	8001572 <main+0x5a>
		}
		HAL_Delay(1000);
 800168c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001690:	f000 ff16 	bl	80024c0 <HAL_Delay>

		/* COUNTING SINGLE SEGMENT */
		ILI9341_FillScreen(WHITE);
 8001694:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001698:	f7ff fdce 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800169c:	2003      	movs	r0, #3
 800169e:	f7ff fce1 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Counting single segment", FONT3, 10, 10, BLACK, WHITE);
 80016a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2300      	movs	r3, #0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	230a      	movs	r3, #10
 80016ae:	220a      	movs	r2, #10
 80016b0:	494b      	ldr	r1, [pc, #300]	; (80017e0 <main+0x2c8>)
 80016b2:	484c      	ldr	r0, [pc, #304]	; (80017e4 <main+0x2cc>)
 80016b4:	f7ff fa17 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 80016b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016bc:	f000 ff00 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 80016c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016c4:	f7ff fdb8 	bl	8001238 <ILI9341_FillScreen>

		for(uint16_t i = 0; i <= 100; i++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80016ce:	e019      	b.n	8001704 <main+0x1ec>
		{
			sprintf(BufferText, "Counting: %d", i);
 80016d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80016d4:	461a      	mov	r2, r3
 80016d6:	4940      	ldr	r1, [pc, #256]	; (80017d8 <main+0x2c0>)
 80016d8:	4840      	ldr	r0, [pc, #256]	; (80017dc <main+0x2c4>)
 80016da:	f002 fe73 	bl	80043c4 <siprintf>
			ILI9341_DrawText(BufferText, FONT4, 10, 10, BLACK, WHITE);
 80016de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	230a      	movs	r3, #10
 80016ea:	220a      	movs	r2, #10
 80016ec:	493e      	ldr	r1, [pc, #248]	; (80017e8 <main+0x2d0>)
 80016ee:	483b      	ldr	r0, [pc, #236]	; (80017dc <main+0x2c4>)
 80016f0:	f7ff f9f9 	bl	8000ae6 <ILI9341_DrawText>
			HAL_Delay(10);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f000 fee3 	bl	80024c0 <HAL_Delay>
		for(uint16_t i = 0; i <= 100; i++)
 80016fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80016fe:	3301      	adds	r3, #1
 8001700:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001704:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001708:	2b64      	cmp	r3, #100	; 0x64
 800170a:	d9e1      	bls.n	80016d0 <main+0x1b8>
		}
		HAL_Delay(1000);
 800170c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001710:	f000 fed6 	bl	80024c0 <HAL_Delay>

		/* ALIGNMENT TEST */
		ILI9341_FillScreen(WHITE);
 8001714:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001718:	f7ff fd8e 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800171c:	2003      	movs	r0, #3
 800171e:	f7ff fca1 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Rectangle alignment check", FONT3, 10, 10, BLACK, WHITE);
 8001722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2300      	movs	r3, #0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	230a      	movs	r3, #10
 800172e:	220a      	movs	r2, #10
 8001730:	492b      	ldr	r1, [pc, #172]	; (80017e0 <main+0x2c8>)
 8001732:	482e      	ldr	r0, [pc, #184]	; (80017ec <main+0x2d4>)
 8001734:	f7ff f9d7 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001738:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800173c:	f000 fec0 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 8001740:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001744:	f7ff fd78 	bl	8001238 <ILI9341_FillScreen>

		ILI9341_DrawHollowRectangleCoord(50, 50, 100, 100, BLACK);
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	2264      	movs	r2, #100	; 0x64
 8001750:	2132      	movs	r1, #50	; 0x32
 8001752:	2032      	movs	r0, #50	; 0x32
 8001754:	f7ff f870 	bl	8000838 <ILI9341_DrawHollowRectangleCoord>
		ILI9341_DrawFilledRectangleCoord(20, 20, 50, 50, BLACK);
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2332      	movs	r3, #50	; 0x32
 800175e:	2232      	movs	r2, #50	; 0x32
 8001760:	2114      	movs	r1, #20
 8001762:	2014      	movs	r0, #20
 8001764:	f7ff f8e9 	bl	800093a <ILI9341_DrawFilledRectangleCoord>
		ILI9341_DrawHollowRectangleCoord(10, 10, 19, 19, BLACK);
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2313      	movs	r3, #19
 800176e:	2213      	movs	r2, #19
 8001770:	210a      	movs	r1, #10
 8001772:	200a      	movs	r0, #10
 8001774:	f7ff f860 	bl	8000838 <ILI9341_DrawHollowRectangleCoord>
		HAL_Delay(1000);
 8001778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177c:	f000 fea0 	bl	80024c0 <HAL_Delay>

		/* LINES EXAMPLE */
		ILI9341_FillScreen(WHITE);
 8001780:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001784:	f7ff fd58 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001788:	2003      	movs	r0, #3
 800178a:	f7ff fc6b 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 800178e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	230a      	movs	r3, #10
 800179a:	220a      	movs	r2, #10
 800179c:	4910      	ldr	r1, [pc, #64]	; (80017e0 <main+0x2c8>)
 800179e:	4814      	ldr	r0, [pc, #80]	; (80017f0 <main+0x2d8>)
 80017a0:	f7ff f9a1 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("Horizontal and Vertical lines", FONT3, 10, 30, BLACK, WHITE);
 80017a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	231e      	movs	r3, #30
 80017b0:	220a      	movs	r2, #10
 80017b2:	490b      	ldr	r1, [pc, #44]	; (80017e0 <main+0x2c8>)
 80017b4:	480f      	ldr	r0, [pc, #60]	; (80017f4 <main+0x2dc>)
 80017b6:	f7ff f996 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 80017ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017be:	f000 fe7f 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 80017c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017c6:	f7ff fd37 	bl	8001238 <ILI9341_FillScreen>

		for(uint32_t i = 0; i < 30000; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80017ce:	e048      	b.n	8001862 <main+0x34a>
 80017d0:	08004e8c 	.word	0x08004e8c
 80017d4:	08004d24 	.word	0x08004d24
 80017d8:	08004d48 	.word	0x08004d48
 80017dc:	20000134 	.word	0x20000134
 80017e0:	08005670 	.word	0x08005670
 80017e4:	08004d58 	.word	0x08004d58
 80017e8:	08005fd4 	.word	0x08005fd4
 80017ec:	08004d70 	.word	0x08004d70
 80017f0:	08004d8c 	.word	0x08004d8c
 80017f4:	08004da8 	.word	0x08004da8
		{
			uint32_t random_num = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
			uint16_t xr = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	80fb      	strh	r3, [r7, #6]
			uint16_t yr = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	80bb      	strh	r3, [r7, #4]
			uint16_t radiusr = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	807b      	strh	r3, [r7, #2]
			uint16_t colourr = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	803b      	strh	r3, [r7, #0]

			/* Get random inputs */
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 800180c:	4b8f      	ldr	r3, [pc, #572]	; (8001a4c <main+0x534>)
 800180e:	60bb      	str	r3, [r7, #8]
			xr = random_num;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	80fb      	strh	r3, [r7, #6]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001814:	4b8d      	ldr	r3, [pc, #564]	; (8001a4c <main+0x534>)
 8001816:	60bb      	str	r3, [r7, #8]
			yr = random_num;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	80bb      	strh	r3, [r7, #4]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 800181c:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <main+0x534>)
 800181e:	60bb      	str	r3, [r7, #8]
			radiusr = random_num;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	807b      	strh	r3, [r7, #2]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001824:	4b89      	ldr	r3, [pc, #548]	; (8001a4c <main+0x534>)
 8001826:	60bb      	str	r3, [r7, #8]
			colourr = random_num;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	803b      	strh	r3, [r7, #0]

			xr &= 0x01FF;
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001832:	80fb      	strh	r3, [r7, #6]
			yr &= 0x01FF;
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183a:	80bb      	strh	r3, [r7, #4]
			radiusr &= 0x001F;
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	807b      	strh	r3, [r7, #2]

			ILI9341_DrawHLine(xr, yr, radiusr, colourr);
 8001844:	883b      	ldrh	r3, [r7, #0]
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	88b9      	ldrh	r1, [r7, #4]
 800184a:	88f8      	ldrh	r0, [r7, #6]
 800184c:	f7ff fddc 	bl	8001408 <ILI9341_DrawHLine>
			ILI9341_DrawVLine(xr, yr, radiusr, colourr);
 8001850:	883b      	ldrh	r3, [r7, #0]
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	88b9      	ldrh	r1, [r7, #4]
 8001856:	88f8      	ldrh	r0, [r7, #6]
 8001858:	f7ff fe1a 	bl	8001490 <ILI9341_DrawVLine>
		for(uint32_t i = 0; i < 30000; i++)
 800185c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800185e:	3301      	adds	r3, #1
 8001860:	66bb      	str	r3, [r7, #104]	; 0x68
 8001862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001864:	f247 522f 	movw	r2, #29999	; 0x752f
 8001868:	4293      	cmp	r3, r2
 800186a:	d9c5      	bls.n	80017f8 <main+0x2e0>
		}
		HAL_Delay(1000);
 800186c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001870:	f000 fe26 	bl	80024c0 <HAL_Delay>

		/* HOLLOW CIRCLES EXAMPLE */
		ILI9341_FillScreen(WHITE);
 8001874:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001878:	f7ff fcde 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800187c:	2003      	movs	r0, #3
 800187e:	f7ff fbf1 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 8001882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	230a      	movs	r3, #10
 800188e:	220a      	movs	r2, #10
 8001890:	496f      	ldr	r1, [pc, #444]	; (8001a50 <main+0x538>)
 8001892:	4870      	ldr	r0, [pc, #448]	; (8001a54 <main+0x53c>)
 8001894:	f7ff f927 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("Circles", FONT3, 10, 30, BLACK, WHITE);
 8001898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2300      	movs	r3, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	231e      	movs	r3, #30
 80018a4:	220a      	movs	r2, #10
 80018a6:	496a      	ldr	r1, [pc, #424]	; (8001a50 <main+0x538>)
 80018a8:	486b      	ldr	r0, [pc, #428]	; (8001a58 <main+0x540>)
 80018aa:	f7ff f91c 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 80018ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b2:	f000 fe05 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 80018b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018ba:	f7ff fcbd 	bl	8001238 <ILI9341_FillScreen>

		for(uint32_t i = 0; i < 3000; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	667b      	str	r3, [r7, #100]	; 0x64
 80018c2:	e030      	b.n	8001926 <main+0x40e>
		{
			uint32_t random_num = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
			uint16_t xr = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	827b      	strh	r3, [r7, #18]
			uint16_t yr = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	823b      	strh	r3, [r7, #16]
			uint16_t radiusr = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	81fb      	strh	r3, [r7, #14]
			uint16_t colourr = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	81bb      	strh	r3, [r7, #12]

			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 80018d8:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <main+0x534>)
 80018da:	617b      	str	r3, [r7, #20]
			xr = random_num;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	827b      	strh	r3, [r7, #18]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <main+0x534>)
 80018e2:	617b      	str	r3, [r7, #20]
			yr = random_num;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	823b      	strh	r3, [r7, #16]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 80018e8:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <main+0x534>)
 80018ea:	617b      	str	r3, [r7, #20]
			radiusr = random_num;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	81fb      	strh	r3, [r7, #14]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <main+0x534>)
 80018f2:	617b      	str	r3, [r7, #20]
			colourr = random_num;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	81bb      	strh	r3, [r7, #12]

			xr &= 0x01FF;
 80018f8:	8a7b      	ldrh	r3, [r7, #18]
 80018fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018fe:	827b      	strh	r3, [r7, #18]
			yr &= 0x01FF;
 8001900:	8a3b      	ldrh	r3, [r7, #16]
 8001902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001906:	823b      	strh	r3, [r7, #16]
			radiusr &= 0x001F;
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	81fb      	strh	r3, [r7, #14]

			ILI9341_DrawHollowCircle(xr, yr, radiusr*2, colourr);
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	89bb      	ldrh	r3, [r7, #12]
 8001918:	8a39      	ldrh	r1, [r7, #16]
 800191a:	8a78      	ldrh	r0, [r7, #18]
 800191c:	f7fe fe4e 	bl	80005bc <ILI9341_DrawHollowCircle>
		for(uint32_t i = 0; i < 3000; i++)
 8001920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001922:	3301      	adds	r3, #1
 8001924:	667b      	str	r3, [r7, #100]	; 0x64
 8001926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001928:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800192c:	4293      	cmp	r3, r2
 800192e:	d9c9      	bls.n	80018c4 <main+0x3ac>
		}
		HAL_Delay(1000);
 8001930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001934:	f000 fdc4 	bl	80024c0 <HAL_Delay>

		/* FILLED CIRCLES EXAMPLE */
		ILI9341_FillScreen(WHITE);
 8001938:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800193c:	f7ff fc7c 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001940:	2003      	movs	r0, #3
 8001942:	f7ff fb8f 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK,WHITE);
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2300      	movs	r3, #0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	230a      	movs	r3, #10
 8001952:	220a      	movs	r2, #10
 8001954:	493e      	ldr	r1, [pc, #248]	; (8001a50 <main+0x538>)
 8001956:	483f      	ldr	r0, [pc, #252]	; (8001a54 <main+0x53c>)
 8001958:	f7ff f8c5 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("Filled Circles", FONT3, 10, 30, BLACK, WHITE);
 800195c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	2300      	movs	r3, #0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	231e      	movs	r3, #30
 8001968:	220a      	movs	r2, #10
 800196a:	4939      	ldr	r1, [pc, #228]	; (8001a50 <main+0x538>)
 800196c:	483b      	ldr	r0, [pc, #236]	; (8001a5c <main+0x544>)
 800196e:	f7ff f8ba 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001976:	f000 fda3 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 800197a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800197e:	f7ff fc5b 	bl	8001238 <ILI9341_FillScreen>

		for(uint32_t i = 0; i < 1000; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	663b      	str	r3, [r7, #96]	; 0x60
 8001986:	e030      	b.n	80019ea <main+0x4d2>
		{
			uint32_t random_num = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
			uint16_t xr = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	83fb      	strh	r3, [r7, #30]
			uint16_t yr = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	83bb      	strh	r3, [r7, #28]
			uint16_t radiusr = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	837b      	strh	r3, [r7, #26]
			uint16_t colourr = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	833b      	strh	r3, [r7, #24]

			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <main+0x534>)
 800199e:	623b      	str	r3, [r7, #32]
			xr = random_num;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	83fb      	strh	r3, [r7, #30]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <main+0x534>)
 80019a6:	623b      	str	r3, [r7, #32]
			yr = random_num;
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	83bb      	strh	r3, [r7, #28]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <main+0x534>)
 80019ae:	623b      	str	r3, [r7, #32]
			radiusr = random_num;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	837b      	strh	r3, [r7, #26]
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <main+0x534>)
 80019b6:	623b      	str	r3, [r7, #32]
			colourr = random_num;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	833b      	strh	r3, [r7, #24]

			xr &= 0x01FF;
 80019bc:	8bfb      	ldrh	r3, [r7, #30]
 80019be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c2:	83fb      	strh	r3, [r7, #30]
			yr &= 0x01FF;
 80019c4:	8bbb      	ldrh	r3, [r7, #28]
 80019c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ca:	83bb      	strh	r3, [r7, #28]
			radiusr &= 0x001F;
 80019cc:	8b7b      	ldrh	r3, [r7, #26]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	837b      	strh	r3, [r7, #26]

			ILI9341_DrawFilledCircle(xr, yr, radiusr/2, colourr);
 80019d4:	8b7b      	ldrh	r3, [r7, #26]
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	8b3b      	ldrh	r3, [r7, #24]
 80019dc:	8bb9      	ldrh	r1, [r7, #28]
 80019de:	8bf8      	ldrh	r0, [r7, #30]
 80019e0:	f7fe fea2 	bl	8000728 <ILI9341_DrawFilledCircle>
		for(uint32_t i = 0; i < 1000; i++)
 80019e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e6:	3301      	adds	r3, #1
 80019e8:	663b      	str	r3, [r7, #96]	; 0x60
 80019ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f0:	d3ca      	bcc.n	8001988 <main+0x470>
		}
		HAL_Delay(1000);
 80019f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f6:	f000 fd63 	bl	80024c0 <HAL_Delay>

		/* HOLLOW RECTANGLES EXAMPLE */
		ILI9341_FillScreen(WHITE);
 80019fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019fe:	f7ff fc1b 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001a02:	2003      	movs	r0, #3
 8001a04:	f7ff fb2e 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 8001a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	230a      	movs	r3, #10
 8001a14:	220a      	movs	r2, #10
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <main+0x538>)
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <main+0x53c>)
 8001a1a:	f7ff f864 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("Rectangles", FONT3, 10, 30, BLACK, WHITE);
 8001a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	231e      	movs	r3, #30
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	4908      	ldr	r1, [pc, #32]	; (8001a50 <main+0x538>)
 8001a2e:	480c      	ldr	r0, [pc, #48]	; (8001a60 <main+0x548>)
 8001a30:	f7ff f859 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001a34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a38:	f000 fd42 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 8001a3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a40:	f7ff fbfa 	bl	8001238 <ILI9341_FillScreen>

		for(uint32_t i = 0; i < 20000; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a48:	e045      	b.n	8001ad6 <main+0x5be>
 8001a4a:	bf00      	nop
 8001a4c:	12345678 	.word	0x12345678
 8001a50:	08005670 	.word	0x08005670
 8001a54:	08004d8c 	.word	0x08004d8c
 8001a58:	08004dc8 	.word	0x08004dc8
 8001a5c:	08004dd0 	.word	0x08004dd0
 8001a60:	08004de0 	.word	0x08004de0
		{
			uint32_t random_num = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint16_t xr = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	857b      	strh	r3, [r7, #42]	; 0x2a
			uint16_t yr = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	853b      	strh	r3, [r7, #40]	; 0x28
			uint16_t radiusr = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	84fb      	strh	r3, [r7, #38]	; 0x26
			uint16_t colourr = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	84bb      	strh	r3, [r7, #36]	; 0x24

			random_num = 0x12345678;//AL_RNG_GetRandomNumber(&hrng);
 8001a78:	4b7c      	ldr	r3, [pc, #496]	; (8001c6c <main+0x754>)
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			xr = random_num;
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	857b      	strh	r3, [r7, #42]	; 0x2a
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001a80:	4b7a      	ldr	r3, [pc, #488]	; (8001c6c <main+0x754>)
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
			yr = random_num;
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a86:	853b      	strh	r3, [r7, #40]	; 0x28
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001a88:	4b78      	ldr	r3, [pc, #480]	; (8001c6c <main+0x754>)
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			radiusr = random_num;
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	84fb      	strh	r3, [r7, #38]	; 0x26
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001a90:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <main+0x754>)
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
			colourr = random_num;
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	84bb      	strh	r3, [r7, #36]	; 0x24

			xr &= 0x01FF;
 8001a98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9e:	857b      	strh	r3, [r7, #42]	; 0x2a
			yr &= 0x01FF;
 8001aa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa6:	853b      	strh	r3, [r7, #40]	; 0x28
			radiusr &= 0x001F;
 8001aa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	84fb      	strh	r3, [r7, #38]	; 0x26

			ILI9341_DrawHollowRectangleCoord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 8001ab0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001ab2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29c      	uxth	r4, r3
 8001ab8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001abc:	4413      	add	r3, r2
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001ac2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8001ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	4622      	mov	r2, r4
 8001acc:	f7fe feb4 	bl	8000838 <ILI9341_DrawHollowRectangleCoord>
		for(uint32_t i = 0; i < 20000; i++)
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d9c1      	bls.n	8001a64 <main+0x54c>
		}
		HAL_Delay(1000);
 8001ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae4:	f000 fcec 	bl	80024c0 <HAL_Delay>

		/* FILLED RECTANGLES EXAMPLE */
		ILI9341_FillScreen(WHITE);
 8001ae8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001aec:	f7ff fba4 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f7ff fab7 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Randomly placed and sized", FONT3, 10, 10, BLACK, WHITE);
 8001af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	230a      	movs	r3, #10
 8001b02:	220a      	movs	r2, #10
 8001b04:	495a      	ldr	r1, [pc, #360]	; (8001c70 <main+0x758>)
 8001b06:	485b      	ldr	r0, [pc, #364]	; (8001c74 <main+0x75c>)
 8001b08:	f7fe ffed 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("Filled Rectangles", FONT3, 10, 30, BLACK, WHITE);
 8001b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2300      	movs	r3, #0
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	231e      	movs	r3, #30
 8001b18:	220a      	movs	r2, #10
 8001b1a:	4955      	ldr	r1, [pc, #340]	; (8001c70 <main+0x758>)
 8001b1c:	4856      	ldr	r0, [pc, #344]	; (8001c78 <main+0x760>)
 8001b1e:	f7fe ffe2 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001b22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b26:	f000 fccb 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 8001b2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b2e:	f7ff fb83 	bl	8001238 <ILI9341_FillScreen>

		for(uint32_t i = 0; i < 20000; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b36:	e031      	b.n	8001b9c <main+0x684>
		{
			uint32_t random_num = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
			uint16_t xr = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	86fb      	strh	r3, [r7, #54]	; 0x36
			uint16_t yr = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	86bb      	strh	r3, [r7, #52]	; 0x34
			uint16_t radiusr = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	867b      	strh	r3, [r7, #50]	; 0x32
			uint16_t color = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	863b      	strh	r3, [r7, #48]	; 0x30

			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001b4c:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <main+0x754>)
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
			xr = random_num;
 8001b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b52:	86fb      	strh	r3, [r7, #54]	; 0x36
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <main+0x754>)
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
			yr = random_num;
 8001b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5a:	86bb      	strh	r3, [r7, #52]	; 0x34
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001b5c:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <main+0x754>)
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
			radiusr = random_num;
 8001b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b62:	867b      	strh	r3, [r7, #50]	; 0x32
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <main+0x754>)
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
			color = random_num;
 8001b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6a:	863b      	strh	r3, [r7, #48]	; 0x30

			xr &= 0x01FF;
 8001b6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b72:	86fb      	strh	r3, [r7, #54]	; 0x36
			yr &= 0x01FF;
 8001b74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7a:	86bb      	strh	r3, [r7, #52]	; 0x34
			radiusr &= 0x001F;
 8001b7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	867b      	strh	r3, [r7, #50]	; 0x32

			ILI9341_DrawRectangle(xr, yr, radiusr, radiusr, color);
 8001b84:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8001b86:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001b88:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8001b8a:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001b8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4623      	mov	r3, r4
 8001b92:	f7ff fbdd 	bl	8001350 <ILI9341_DrawRectangle>
		for(uint32_t i = 0; i < 20000; i++)
 8001b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b98:	3301      	adds	r3, #1
 8001b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b9e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d9c8      	bls.n	8001b38 <main+0x620>
		}
		HAL_Delay(1000);
 8001ba6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001baa:	f000 fc89 	bl	80024c0 <HAL_Delay>

		/* INDIVIDUAL PIXEL EXAMPLE */

		ILI9341_FillScreen(WHITE);
 8001bae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bb2:	f7ff fb41 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f7ff fa54 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Slow draw by selecting", FONT3, 10, 10, BLACK, WHITE);
 8001bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	220a      	movs	r2, #10
 8001bca:	4929      	ldr	r1, [pc, #164]	; (8001c70 <main+0x758>)
 8001bcc:	482b      	ldr	r0, [pc, #172]	; (8001c7c <main+0x764>)
 8001bce:	f7fe ff8a 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("and adressing pixels", FONT3, 10, 30, BLACK, WHITE);
 8001bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	231e      	movs	r3, #30
 8001bde:	220a      	movs	r2, #10
 8001be0:	4923      	ldr	r1, [pc, #140]	; (8001c70 <main+0x758>)
 8001be2:	4827      	ldr	r0, [pc, #156]	; (8001c80 <main+0x768>)
 8001be4:	f7fe ff7f 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001be8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bec:	f000 fc68 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 8001bf0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bf4:	f7ff fb20 	bl	8001238 <ILI9341_FillScreen>

		x = 0;
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <main+0x76c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
		y = 0;
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <main+0x770>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	801a      	strh	r2, [r3, #0]

		while (y < ILI9341_SCREEN_HEIGHT)
 8001c04:	e026      	b.n	8001c54 <main+0x73c>
		{
			while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
			{
				if(x % 2)
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <main+0x76c>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <main+0x70c>
				{
					ILI9341_DrawPixel(x, y, BLACK);
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <main+0x76c>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <main+0x770>)
 8001c1a:	8811      	ldrh	r1, [r2, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fb30 	bl	8001284 <ILI9341_DrawPixel>
				}
				x++;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <main+0x76c>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <main+0x76c>)
 8001c2e:	801a      	strh	r2, [r3, #0]
			while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <main+0x76c>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c38:	d203      	bcs.n	8001c42 <main+0x72a>
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <main+0x770>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	2bef      	cmp	r3, #239	; 0xef
 8001c40:	d9e1      	bls.n	8001c06 <main+0x6ee>
			}
			y++;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <main+0x770>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <main+0x770>)
 8001c4c:	801a      	strh	r2, [r3, #0]
			x = 0;
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <main+0x76c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	801a      	strh	r2, [r3, #0]
		while (y < ILI9341_SCREEN_HEIGHT)
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <main+0x770>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	2bef      	cmp	r3, #239	; 0xef
 8001c5a:	d9e9      	bls.n	8001c30 <main+0x718>
		}

		x = 0;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <main+0x76c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	801a      	strh	r2, [r3, #0]
		y = 0;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <main+0x770>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	801a      	strh	r2, [r3, #0]

		while (y < ILI9341_SCREEN_HEIGHT)
 8001c68:	e037      	b.n	8001cda <main+0x7c2>
 8001c6a:	bf00      	nop
 8001c6c:	12345678 	.word	0x12345678
 8001c70:	08005670 	.word	0x08005670
 8001c74:	08004d8c 	.word	0x08004d8c
 8001c78:	08004dec 	.word	0x08004dec
 8001c7c:	08004e00 	.word	0x08004e00
 8001c80:	08004e18 	.word	0x08004e18
 8001c84:	2000015c 	.word	0x2000015c
 8001c88:	2000015e 	.word	0x2000015e
		{
			while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
			{
				if(y % 2)
 8001c8c:	4b96      	ldr	r3, [pc, #600]	; (8001ee8 <main+0x9d0>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <main+0x792>
				{
					ILI9341_DrawPixel(x, y, BLACK);
 8001c9a:	4b94      	ldr	r3, [pc, #592]	; (8001eec <main+0x9d4>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	4a92      	ldr	r2, [pc, #584]	; (8001ee8 <main+0x9d0>)
 8001ca0:	8811      	ldrh	r1, [r2, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff faed 	bl	8001284 <ILI9341_DrawPixel>
				}
				x++;
 8001caa:	4b90      	ldr	r3, [pc, #576]	; (8001eec <main+0x9d4>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <main+0x9d4>)
 8001cb4:	801a      	strh	r2, [r3, #0]
			while ((x < ILI9341_SCREEN_WIDTH) && (y < ILI9341_SCREEN_HEIGHT))
 8001cb6:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <main+0x9d4>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cbe:	d203      	bcs.n	8001cc8 <main+0x7b0>
 8001cc0:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <main+0x9d0>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2bef      	cmp	r3, #239	; 0xef
 8001cc6:	d9e1      	bls.n	8001c8c <main+0x774>
			}
			y++;
 8001cc8:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <main+0x9d0>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b85      	ldr	r3, [pc, #532]	; (8001ee8 <main+0x9d0>)
 8001cd2:	801a      	strh	r2, [r3, #0]
			x = 0;
 8001cd4:	4b85      	ldr	r3, [pc, #532]	; (8001eec <main+0x9d4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	801a      	strh	r2, [r3, #0]
		while (y < ILI9341_SCREEN_HEIGHT)
 8001cda:	4b83      	ldr	r3, [pc, #524]	; (8001ee8 <main+0x9d0>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	2bef      	cmp	r3, #239	; 0xef
 8001ce0:	d9e9      	bls.n	8001cb6 <main+0x79e>
		}
		HAL_Delay(2000);
 8001ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ce6:	f000 fbeb 	bl	80024c0 <HAL_Delay>

		/* INDIVIDUAL PIXEL EXAMPLE */
		ILI9341_FillScreen(WHITE);
 8001cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cee:	f7ff faa3 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f7ff f9b6 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Random position and color", FONT3, 10, 10, BLACK, WHITE);
 8001cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	230a      	movs	r3, #10
 8001d04:	220a      	movs	r2, #10
 8001d06:	497a      	ldr	r1, [pc, #488]	; (8001ef0 <main+0x9d8>)
 8001d08:	487a      	ldr	r0, [pc, #488]	; (8001ef4 <main+0x9dc>)
 8001d0a:	f7fe feec 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("500000 pixels", FONT3, 10, 30, BLACK, WHITE);
 8001d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	231e      	movs	r3, #30
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	4974      	ldr	r1, [pc, #464]	; (8001ef0 <main+0x9d8>)
 8001d1e:	4876      	ldr	r0, [pc, #472]	; (8001ef8 <main+0x9e0>)
 8001d20:	f7fe fee1 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001d24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d28:	f000 fbca 	bl	80024c0 <HAL_Delay>
		ILI9341_FillScreen(WHITE);
 8001d2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d30:	f7ff fa82 	bl	8001238 <ILI9341_FillScreen>

		for(uint32_t i = 0; i < 500000; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	657b      	str	r3, [r7, #84]	; 0x54
 8001d38:	e02b      	b.n	8001d92 <main+0x87a>
		{
			uint32_t random_num = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	647b      	str	r3, [r7, #68]	; 0x44
			uint16_t xr = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			uint16_t yr = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001d4a:	4b6c      	ldr	r3, [pc, #432]	; (8001efc <main+0x9e4>)
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
			xr = random_num;
 8001d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			random_num = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <main+0x9e4>)
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
			yr = random_num;
 8001d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			uint16_t color = 0x12345678;//HAL_RNG_GetRandomNumber(&hrng);
 8001d5e:	f245 6378 	movw	r3, #22136	; 0x5678
 8001d62:	87fb      	strh	r3, [r7, #62]	; 0x3e

			xr &= 0x01FF;
 8001d64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			yr &= 0x01FF;
 8001d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			ILI9341_DrawPixel(xr, yr, color);
 8001d7c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d7e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8001d82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fa7c 	bl	8001284 <ILI9341_DrawPixel>
		for(uint32_t i = 0; i < 500000; i++)
 8001d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8e:	3301      	adds	r3, #1
 8001d90:	657b      	str	r3, [r7, #84]	; 0x54
 8001d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d94:	4a5a      	ldr	r2, [pc, #360]	; (8001f00 <main+0x9e8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d9cf      	bls.n	8001d3a <main+0x822>
		}
		HAL_Delay(2000);
 8001d9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d9e:	f000 fb8f 	bl	80024c0 <HAL_Delay>

		/* 565 GRAYSCALE EXAMPLE */
		ILI9341_FillScreen(WHITE);
 8001da2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001da6:	f7ff fa47 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001daa:	2003      	movs	r0, #3
 8001dac:	f7ff f95a 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("Color gradient", FONT3, 10, 10, BLACK, WHITE);
 8001db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2300      	movs	r3, #0
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	230a      	movs	r3, #10
 8001dbc:	220a      	movs	r2, #10
 8001dbe:	494c      	ldr	r1, [pc, #304]	; (8001ef0 <main+0x9d8>)
 8001dc0:	4850      	ldr	r0, [pc, #320]	; (8001f04 <main+0x9ec>)
 8001dc2:	f7fe fe90 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("Grayscale", FONT3, 10, 30, BLACK, WHITE);
 8001dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	231e      	movs	r3, #30
 8001dd2:	220a      	movs	r2, #10
 8001dd4:	4946      	ldr	r1, [pc, #280]	; (8001ef0 <main+0x9d8>)
 8001dd6:	484c      	ldr	r0, [pc, #304]	; (8001f08 <main+0x9f0>)
 8001dd8:	f7fe fe85 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001ddc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de0:	f000 fb6e 	bl	80024c0 <HAL_Delay>

		for(uint16_t i = 0; i <= ILI9341_SCREEN_WIDTH; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001dea:	e045      	b.n	8001e78 <main+0x960>
		{
			uint16_t Red = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			uint16_t Green = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			uint16_t Blue = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			Red = i/(10);
 8001dfe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e02:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <main+0x9f4>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			Red <<= 11;
 8001e0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e12:	02db      	lsls	r3, r3, #11
 8001e14:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			Green = i/(5);
 8001e18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e1c:	4a3b      	ldr	r2, [pc, #236]	; (8001f0c <main+0x9f4>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			Green <<= 5;
 8001e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e2c:	015b      	lsls	r3, r3, #5
 8001e2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			Blue = i/(10);
 8001e32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e36:	4a35      	ldr	r2, [pc, #212]	; (8001f0c <main+0x9f4>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			uint16_t RGB = Red + Green + Blue;
 8001e42:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001e46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e52:	4413      	add	r3, r2
 8001e54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			ILI9341_DrawRectangle(i, x, 1, 240, RGB);
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <main+0x9d4>)
 8001e5a:	8819      	ldrh	r1, [r3, #0]
 8001e5c:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 8001e60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	23f0      	movs	r3, #240	; 0xf0
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f7ff fa71 	bl	8001350 <ILI9341_DrawRectangle>
		for(uint16_t i = 0; i <= ILI9341_SCREEN_WIDTH; i++)
 8001e6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e72:	3301      	adds	r3, #1
 8001e74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001e78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e80:	d9b4      	bls.n	8001dec <main+0x8d4>

		}
		HAL_Delay(2000);
 8001e82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e86:	f000 fb1b 	bl	80024c0 <HAL_Delay>

		/* IMAGE EXAMPLE */
		ILI9341_FillScreen(WHITE);
 8001e8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e8e:	f7ff f9d3 	bl	8001238 <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001e92:	2003      	movs	r0, #3
 8001e94:	f7ff f8e6 	bl	8001064 <ILI9341_SetRotation>
		ILI9341_DrawText("RGB Picture", FONT3, 10, 10, RED, YELLOW);
 8001e98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	220a      	movs	r2, #10
 8001ea8:	4911      	ldr	r1, [pc, #68]	; (8001ef0 <main+0x9d8>)
 8001eaa:	4819      	ldr	r0, [pc, #100]	; (8001f10 <main+0x9f8>)
 8001eac:	f7fe fe1b 	bl	8000ae6 <ILI9341_DrawText>
		ILI9341_DrawText("TIGER", FONT3, 10, 30, BLACK, WHITE);
 8001eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	231e      	movs	r3, #30
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <main+0x9d8>)
 8001ec0:	4814      	ldr	r0, [pc, #80]	; (8001f14 <main+0x9fc>)
 8001ec2:	f7fe fe10 	bl	8000ae6 <ILI9341_DrawText>
		HAL_Delay(2000);
 8001ec6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001eca:	f000 faf9 	bl	80024c0 <HAL_Delay>
		ILI9341_DrawImage(snow_tiger, SCREEN_VERTICAL_2);
 8001ece:	2102      	movs	r1, #2
 8001ed0:	4811      	ldr	r0, [pc, #68]	; (8001f18 <main+0xa00>)
 8001ed2:	f7fe fe52 	bl	8000b7a <ILI9341_DrawImage>
		ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff f8c4 	bl	8001064 <ILI9341_SetRotation>
		HAL_Delay(5000);
 8001edc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ee0:	f000 faee 	bl	80024c0 <HAL_Delay>
  {
 8001ee4:	f7ff bb27 	b.w	8001536 <main+0x1e>
 8001ee8:	2000015e 	.word	0x2000015e
 8001eec:	2000015c 	.word	0x2000015c
 8001ef0:	08005670 	.word	0x08005670
 8001ef4:	08004e30 	.word	0x08004e30
 8001ef8:	08004e4c 	.word	0x08004e4c
 8001efc:	12345678 	.word	0x12345678
 8001f00:	0007a11f 	.word	0x0007a11f
 8001f04:	08004e5c 	.word	0x08004e5c
 8001f08:	08004e6c 	.word	0x08004e6c
 8001f0c:	cccccccd 	.word	0xcccccccd
 8001f10:	08004e78 	.word	0x08004e78
 8001f14:	08004e84 	.word	0x08004e84
 8001f18:	08007118 	.word	0x08007118

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	2230      	movs	r2, #48	; 0x30
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 fa6a 	bl	8004404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <SystemClock_Config+0xc8>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <SystemClock_Config+0xc8>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <SystemClock_Config+0xc8>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f80:	2310      	movs	r3, #16
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f84:	2302      	movs	r3, #2
 8001f86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f90:	2364      	movs	r3, #100	; 0x64
 8001f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 f8f3 	bl	800318c <HAL_RCC_OscConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fac:	f000 f8b6 	bl	800211c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2103      	movs	r1, #3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 fb55 	bl	800367c <HAL_RCC_ClockConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fd8:	f000 f8a0 	bl	800211c <Error_Handler>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3750      	adds	r7, #80	; 0x50
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40007000 	.word	0x40007000

08001fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <MX_SPI1_Init+0x64>)
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <MX_SPI1_Init+0x68>)
 8001ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <MX_SPI1_Init+0x64>)
 8001ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_SPI1_Init+0x64>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_SPI1_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_SPI1_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_SPI1_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_SPI1_Init+0x64>)
 8002018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_SPI1_Init+0x64>)
 8002020:	2208      	movs	r2, #8
 8002022:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <MX_SPI1_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_SPI1_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_SPI1_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_SPI1_Init+0x64>)
 8002038:	220a      	movs	r2, #10
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_SPI1_Init+0x64>)
 800203e:	f001 fcc9 	bl	80039d4 <HAL_SPI_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002048:	f000 f868 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000007c 	.word	0x2000007c
 8002054:	40013000 	.word	0x40013000

08002058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_DMA_Init+0x3c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <MX_DMA_Init+0x3c>)
 8002068:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_DMA_Init+0x3c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	203a      	movs	r0, #58	; 0x3a
 8002080:	f000 fb1d 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002084:	203a      	movs	r0, #58	; 0x3a
 8002086:	f000 fb36 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_GPIO_Init+0x7c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <MX_GPIO_Init+0x7c>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <MX_GPIO_Init+0x7c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_GPIO_Init+0x7c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <MX_GPIO_Init+0x7c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_GPIO_Init+0x7c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	210e      	movs	r1, #14
 80020ea:	480b      	ldr	r0, [pc, #44]	; (8002118 <MX_GPIO_Init+0x80>)
 80020ec:	f001 f834 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80020f0:	230e      	movs	r3, #14
 80020f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	4619      	mov	r1, r3
 8002106:	4804      	ldr	r0, [pc, #16]	; (8002118 <MX_GPIO_Init+0x80>)
 8002108:	f000 fea2 	bl	8002e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	40020800 	.word	0x40020800

0800211c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002120:	b672      	cpsid	i
}
 8002122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002124:	e7fe      	b.n	8002124 <Error_Handler+0x8>
	...

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_MspInit+0x4c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_MspInit+0x4c>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_MspInit+0x4c>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_MspInit+0x4c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_MspInit+0x4c>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_MspInit+0x4c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a34      	ldr	r2, [pc, #208]	; (8002268 <HAL_SPI_MspInit+0xf0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d161      	bne.n	800225e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_SPI_MspInit+0xf4>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a32      	ldr	r2, [pc, #200]	; (800226c <HAL_SPI_MspInit+0xf4>)
 80021a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_SPI_MspInit+0xf4>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_SPI_MspInit+0xf4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a2b      	ldr	r2, [pc, #172]	; (800226c <HAL_SPI_MspInit+0xf4>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_SPI_MspInit+0xf4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021d2:	23e0      	movs	r3, #224	; 0xe0
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e2:	2305      	movs	r3, #5
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4820      	ldr	r0, [pc, #128]	; (8002270 <HAL_SPI_MspInit+0xf8>)
 80021ee:	f000 fe2f 	bl	8002e50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <HAL_SPI_MspInit+0x100>)
 80021f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 80021fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021fe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 800220e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002212:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 800222e:	2200      	movs	r2, #0
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002232:	4810      	ldr	r0, [pc, #64]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 8002234:	f000 fa7a 	bl	800272c <HAL_DMA_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800223e:	f7ff ff6d 	bl	800211c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 8002246:	649a      	str	r2, [r3, #72]	; 0x48
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_SPI_MspInit+0xfc>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	2023      	movs	r0, #35	; 0x23
 8002254:	f000 fa33 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002258:	2023      	movs	r0, #35	; 0x23
 800225a:	f000 fa4c 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40013000 	.word	0x40013000
 800226c:	40023800 	.word	0x40023800
 8002270:	40020000 	.word	0x40020000
 8002274:	200000d4 	.word	0x200000d4
 8002278:	40026440 	.word	0x40026440

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002280:	e7fe      	b.n	8002280 <NMI_Handler+0x4>

08002282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <MemManage_Handler+0x4>

0800228e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <UsageFault_Handler+0x4>

0800229a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c8:	f000 f8da 	bl	8002480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <SPI1_IRQHandler+0x10>)
 80022d6:	f001 fdfb 	bl	8003ed0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000007c 	.word	0x2000007c

080022e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <DMA2_Stream2_IRQHandler+0x10>)
 80022ea:	f000 fb47 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200000d4 	.word	0x200000d4

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f002 f874 	bl	8004414 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20020000 	.word	0x20020000
 8002358:	00000400 	.word	0x00000400
 800235c:	20000160 	.word	0x20000160
 8002360:	200002b0 	.word	0x200002b0

08002364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <SystemInit+0x20>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <SystemInit+0x20>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800238c:	f7ff ffea 	bl	8002364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002392:	490d      	ldr	r1, [pc, #52]	; (80023c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a8:	4c0a      	ldr	r4, [pc, #40]	; (80023d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b6:	f002 f833 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ba:	f7ff f8ad 	bl	8001518 <main>
  bx  lr    
 80023be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80023cc:	0802c974 	.word	0x0802c974
  ldr r2, =_sbss
 80023d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80023d4:	200002b0 	.word	0x200002b0

080023d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC_IRQHandler>
	...

080023dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <HAL_Init+0x40>)
 80023e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_Init+0x40>)
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_Init+0x40>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002404:	2003      	movs	r0, #3
 8002406:	f000 f94f 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240a:	200f      	movs	r0, #15
 800240c:	f000 f808 	bl	8002420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002410:	f7ff fe8a 	bl	8002128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x54>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_InitTick+0x58>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002436:	fbb3 f3f1 	udiv	r3, r3, r1
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f967 	bl	8002712 <HAL_SYSTICK_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00e      	b.n	800246c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d80a      	bhi.n	800246a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002454:	2200      	movs	r2, #0
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f000 f92f 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002460:	4a06      	ldr	r2, [pc, #24]	; (800247c <HAL_InitTick+0x5c>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000004 	.word	0x20000004
 8002478:	2000000c 	.word	0x2000000c
 800247c:	20000008 	.word	0x20000008

08002480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x20>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_IncTick+0x24>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_IncTick+0x24>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	2000000c 	.word	0x2000000c
 80024a4:	20000164 	.word	0x20000164

080024a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_GetTick+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000164 	.word	0x20000164

080024c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff ffee 	bl	80024a8 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d005      	beq.n	80024e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_Delay+0x44>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e6:	bf00      	nop
 80024e8:	f7ff ffde 	bl	80024a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d8f7      	bhi.n	80024e8 <HAL_Delay+0x28>
  {
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000000c 	.word	0x2000000c

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff feb6 	bl	80024a8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e099      	b.n	800287c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002768:	e00f      	b.n	800278a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276a:	f7ff fe9d 	bl	80024a8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b05      	cmp	r3, #5
 8002776:	d908      	bls.n	800278a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2203      	movs	r2, #3
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e078      	b.n	800287c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e8      	bne.n	800276a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_DMA_Init+0x158>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4313      	orrs	r3, r2
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0307 	bic.w	r3, r3, #7
 800280a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	2b04      	cmp	r3, #4
 800281c:	d117      	bne.n	800284e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fa91 	bl	8002d58 <DMA_CheckFifoParam>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800284a:	2301      	movs	r3, #1
 800284c:	e016      	b.n	800287c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa48 	bl	8002cec <DMA_CalcBaseAndBitshift>
 800285c:	4603      	mov	r3, r0
 800285e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	223f      	movs	r2, #63	; 0x3f
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	f010803f 	.word	0xf010803f

08002888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_DMA_Start_IT+0x26>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e040      	b.n	8002930 <HAL_DMA_Start_IT+0xa8>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12f      	bne.n	8002922 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f9da 	bl	8002c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	223f      	movs	r2, #63	; 0x3f
 80028e2:	409a      	lsls	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0216 	orr.w	r2, r2, #22
 80028f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0208 	orr.w	r2, r2, #8
 800290e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e005      	b.n	800292e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00c      	b.n	8002970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002988:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_DMA_IRQHandler+0x248>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a8e      	ldr	r2, [pc, #568]	; (8002bc8 <HAL_DMA_IRQHandler+0x24c>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2208      	movs	r2, #8
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0204 	bic.w	r2, r2, #4
 80029ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2208      	movs	r2, #8
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0202 	orr.w	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2204      	movs	r2, #4
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2204      	movs	r2, #4
 8002a42:	409a      	lsls	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2210      	movs	r2, #16
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03c      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2210      	movs	r2, #16
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e01f      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e016      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0208 	bic.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2220      	movs	r2, #32
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 808f 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8087 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2220      	movs	r2, #32
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d136      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0216 	bic.w	r2, r2, #22
 8002b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_DMA_IRQHandler+0x1da>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0208 	bic.w	r2, r2, #8
 8002b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	223f      	movs	r2, #63	; 0x3f
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d07e      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
        }
        return;
 8002b92:	e079      	b.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01d      	beq.n	8002bde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d031      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e02c      	b.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
 8002bc2:	bf00      	nop
 8002bc4:	20000004 	.word	0x20000004
 8002bc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	e01e      	b.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10f      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0210 	bic.w	r2, r2, #16
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d032      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2205      	movs	r2, #5
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d307      	bcc.n	8002c64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f2      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x2cc>
 8002c62:	e000      	b.n	8002c66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
 8002c86:	e000      	b.n	8002c8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c88:	bf00      	nop
    }
  }
}
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d108      	bne.n	8002cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cce:	e007      	b.n	8002ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3b10      	subs	r3, #16
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <DMA_CalcBaseAndBitshift+0x64>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <DMA_CalcBaseAndBitshift+0x68>)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d909      	bls.n	8002d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	1d1a      	adds	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d2c:	e007      	b.n	8002d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	aaaaaaab 	.word	0xaaaaaaab
 8002d54:	0802c928 	.word	0x0802c928

08002d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11f      	bne.n	8002db2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d856      	bhi.n	8002e26 <DMA_CheckFifoParam+0xce>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <DMA_CheckFifoParam+0x28>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da3 	.word	0x08002da3
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	08002e27 	.word	0x08002e27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d046      	beq.n	8002e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da0:	e043      	b.n	8002e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002daa:	d140      	bne.n	8002e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e03d      	b.n	8002e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dba:	d121      	bne.n	8002e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d837      	bhi.n	8002e32 <DMA_CheckFifoParam+0xda>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <DMA_CheckFifoParam+0x70>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002dd9 	.word	0x08002dd9
 8002dcc:	08002ddf 	.word	0x08002ddf
 8002dd0:	08002dd9 	.word	0x08002dd9
 8002dd4:	08002df1 	.word	0x08002df1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e030      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d025      	beq.n	8002e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e022      	b.n	8002e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df8:	d11f      	bne.n	8002e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dfe:	e01c      	b.n	8002e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d903      	bls.n	8002e0e <DMA_CheckFifoParam+0xb6>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d003      	beq.n	8002e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e0c:	e018      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      break;
 8002e12:	e015      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00e      	beq.n	8002e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      break;
 8002e24:	e00b      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e26:	bf00      	nop
 8002e28:	e00a      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e008      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e006      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e004      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
 8002e38:	e002      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e159      	b.n	8003120 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8148 	bne.w	800311a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d005      	beq.n	8002ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d130      	bne.n	8002f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0201 	and.w	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d017      	beq.n	8002f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d123      	bne.n	8002f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a2 	beq.w	800311a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a56      	ldr	r2, [pc, #344]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b54      	ldr	r3, [pc, #336]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff2:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_GPIO_Init+0x2ec>)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a49      	ldr	r2, [pc, #292]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x202>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_GPIO_Init+0x2f4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x1fe>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a47      	ldr	r2, [pc, #284]	; (8003148 <HAL_GPIO_Init+0x2f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x1fa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a46      	ldr	r2, [pc, #280]	; (800314c <HAL_GPIO_Init+0x2fc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x1f6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a45      	ldr	r2, [pc, #276]	; (8003150 <HAL_GPIO_Init+0x300>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x1f2>
 800303e:	2304      	movs	r3, #4
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003042:	2307      	movs	r3, #7
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x204>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x204>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x204>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	; (800313c <HAL_GPIO_Init+0x2ec>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_GPIO_Init+0x304>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a2f      	ldr	r2, [pc, #188]	; (8003154 <HAL_GPIO_Init+0x304>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_GPIO_Init+0x304>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b18      	ldr	r3, [pc, #96]	; (8003154 <HAL_GPIO_Init+0x304>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <HAL_GPIO_Init+0x304>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f aea2 	bls.w	8002e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40013c00 	.word	0x40013c00

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003174:	e003      	b.n	800317e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	041a      	lsls	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	619a      	str	r2, [r3, #24]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e267      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d075      	beq.n	8003296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	4b7e      	ldr	r3, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05b      	beq.n	8003294 <HAL_RCC_OscConfig+0x108>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d157      	bne.n	8003294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e242      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x74>
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6f      	ldr	r2, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6c      	ldr	r2, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a68      	ldr	r2, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b66      	ldr	r3, [pc, #408]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7ff f930 	bl	80024a8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7ff f92c 	bl	80024a8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e207      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xc0>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff f91c 	bl	80024a8 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7ff f918 	bl	80024a8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1f3      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0xe8>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1c7      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff f8d1 	bl	80024a8 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7ff f8cd 	bl	80024a8 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1a8      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff f8b0 	bl	80024a8 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7ff f8ac 	bl	80024a8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e187      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7ff f890 	bl	80024a8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7ff f88c 	bl	80024a8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e167      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x200>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7ff f879 	bl	80024a8 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00e      	b.n	80033d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ba:	f7ff f875 	bl	80024a8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d907      	bls.n	80033d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e150      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ea      	bne.n	80033ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a7c      	ldr	r2, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b77      	ldr	r3, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a73      	ldr	r2, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7ff f835 	bl	80024a8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7ff f831 	bl	80024a8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e10c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x2ea>
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x30c>
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5b      	ldr	r2, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003498:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a57      	ldr	r2, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe fff6 	bl	80024a8 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe fff2 	bl	80024a8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0cb      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe ffe0 	bl	80024a8 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe ffdc 	bl	80024a8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0b5      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a1 	beq.w	800366c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d05c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d141      	bne.n	80035c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe ffb0 	bl	80024a8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe ffac 	bl	80024a8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e087      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	491b      	ldr	r1, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe ff85 	bl	80024a8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe ff81 	bl	80024a8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e05c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x416>
 80035c0:	e054      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe ff6e 	bl	80024a8 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe ff6a 	bl	80024a8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e045      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
 80035ee:	e03d      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e038      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x4ec>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d028      	beq.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d121      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11a      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0cc      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b68      	ldr	r3, [pc, #416]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d90c      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b65      	ldr	r3, [pc, #404]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d044      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d119      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d003      	beq.n	800373a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	2b03      	cmp	r3, #3
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e067      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b37      	ldr	r3, [pc, #220]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4934      	ldr	r1, [pc, #208]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7fe fe9c 	bl	80024a8 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fe98 	bl	80024a8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e04f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d20c      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fdfc 	bl	8002420 <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00
 8003838:	40023800 	.word	0x40023800
 800383c:	0802c918 	.word	0x0802c918
 8003840:	20000004 	.word	0x20000004
 8003844:	20000008 	.word	0x20000008

08003848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b090      	sub	sp, #64	; 0x40
 800384e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
 8003854:	2300      	movs	r3, #0
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003858:	2300      	movs	r3, #0
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003860:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d00d      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x40>
 800386c:	2b08      	cmp	r3, #8
 800386e:	f200 80a1 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x34>
 8003876:	2b04      	cmp	r3, #4
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x3a>
 800387a:	e09b      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <HAL_RCC_GetSysClockFreq+0x184>)
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003880:	e09b      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003882:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003886:	e098      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003892:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d028      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	2200      	movs	r2, #0
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	627a      	str	r2, [r7, #36]	; 0x24
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038b0:	2100      	movs	r1, #0
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b4:	fb03 f201 	mul.w	r2, r3, r1
 80038b8:	2300      	movs	r3, #0
 80038ba:	fb00 f303 	mul.w	r3, r0, r3
 80038be:	4413      	add	r3, r2
 80038c0:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c2:	fba0 1202 	umull	r1, r2, r0, r2
 80038c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c8:	460a      	mov	r2, r1
 80038ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80038cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ce:	4413      	add	r3, r2
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	2200      	movs	r2, #0
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038e2:	f7fc fccd 	bl	8000280 <__aeabi_uldivmod>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4613      	mov	r3, r2
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ee:	e053      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f0:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	2200      	movs	r2, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	617a      	str	r2, [r7, #20]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003902:	f04f 0b00 	mov.w	fp, #0
 8003906:	4652      	mov	r2, sl
 8003908:	465b      	mov	r3, fp
 800390a:	f04f 0000 	mov.w	r0, #0
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	0159      	lsls	r1, r3, #5
 8003914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003918:	0150      	lsls	r0, r2, #5
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	ebb2 080a 	subs.w	r8, r2, sl
 8003922:	eb63 090b 	sbc.w	r9, r3, fp
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003932:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003936:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800393a:	ebb2 0408 	subs.w	r4, r2, r8
 800393e:	eb63 0509 	sbc.w	r5, r3, r9
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	00eb      	lsls	r3, r5, #3
 800394c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003950:	00e2      	lsls	r2, r4, #3
 8003952:	4614      	mov	r4, r2
 8003954:	461d      	mov	r5, r3
 8003956:	eb14 030a 	adds.w	r3, r4, sl
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	eb45 030b 	adc.w	r3, r5, fp
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800396e:	4629      	mov	r1, r5
 8003970:	028b      	lsls	r3, r1, #10
 8003972:	4621      	mov	r1, r4
 8003974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003978:	4621      	mov	r1, r4
 800397a:	028a      	lsls	r2, r1, #10
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	2200      	movs	r2, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	60fa      	str	r2, [r7, #12]
 8003988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800398c:	f7fc fc78 	bl	8000280 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetSysClockFreq+0x184>)
 80039b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3740      	adds	r7, #64	; 0x40
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	017d7840 	.word	0x017d7840

080039d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07b      	b.n	8003ade <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f6:	d009      	beq.n	8003a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
 80039fe:	e005      	b.n	8003a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe fba6 	bl	8002178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	ea42 0103 	orr.w	r1, r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	f003 0104 	and.w	r1, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0210 	and.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b088      	sub	sp, #32
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_SPI_Transmit+0x22>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e12d      	b.n	8003d64 <HAL_SPI_Transmit+0x27e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b10:	f7fe fcca 	bl	80024a8 <HAL_GetTick>
 8003b14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d002      	beq.n	8003b2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
 8003b28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b2a:	e116      	b.n	8003d5a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_Transmit+0x52>
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b3c:	e10d      	b.n	8003d5a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b84:	d10f      	bne.n	8003ba6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d007      	beq.n	8003bc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bcc:	d14f      	bne.n	8003c6e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Transmit+0xf6>
 8003bd6:	8afb      	ldrh	r3, [r7, #22]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d142      	bne.n	8003c62 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	881a      	ldrh	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	1c9a      	adds	r2, r3, #2
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c00:	e02f      	b.n	8003c62 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d112      	bne.n	8003c36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c34:	e015      	b.n	8003c62 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c36:	f7fe fc37 	bl	80024a8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d803      	bhi.n	8003c4e <HAL_SPI_Transmit+0x168>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d102      	bne.n	8003c54 <HAL_SPI_Transmit+0x16e>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c60:	e07b      	b.n	8003d5a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ca      	bne.n	8003c02 <HAL_SPI_Transmit+0x11c>
 8003c6c:	e050      	b.n	8003d10 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_SPI_Transmit+0x196>
 8003c76:	8afb      	ldrh	r3, [r7, #22]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d144      	bne.n	8003d06 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	7812      	ldrb	r2, [r2, #0]
 8003c88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ca2:	e030      	b.n	8003d06 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d113      	bne.n	8003cda <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	7812      	ldrb	r2, [r2, #0]
 8003cbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cd8:	e015      	b.n	8003d06 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cda:	f7fe fbe5 	bl	80024a8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d803      	bhi.n	8003cf2 <HAL_SPI_Transmit+0x20c>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d102      	bne.n	8003cf8 <HAL_SPI_Transmit+0x212>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d04:	e029      	b.n	8003d5a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1c9      	bne.n	8003ca4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fb01 	bl	800431c <SPI_EndRxTxTransaction>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e003      	b.n	8003d5a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_SPI_Transmit_DMA+0x20>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e097      	b.n	8003ebc <HAL_SPI_Transmit_DMA+0x150>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
 8003da2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003da4:	e085      	b.n	8003eb2 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_Transmit_DMA+0x46>
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003db6:	e07c      	b.n	8003eb2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	88fa      	ldrh	r2, [r7, #6]
 8003dd6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfe:	d10f      	bne.n	8003e20 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e24:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <HAL_SPI_Transmit_DMA+0x158>)
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <HAL_SPI_Transmit_DMA+0x15c>)
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e34:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <HAL_SPI_Transmit_DMA+0x160>)
 8003e36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	4619      	mov	r1, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e58:	f7fe fd16 	bl	8002888 <HAL_DMA_Start_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003e72:	e01e      	b.n	8003eb2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d007      	beq.n	8003e92 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0220 	orr.w	r2, r2, #32
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0202 	orr.w	r2, r2, #2
 8003eb0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	08004189 	.word	0x08004189
 8003ec8:	080040e1 	.word	0x080040e1
 8003ecc:	080041a5 	.word	0x080041a5

08003ed0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10e      	bne.n	8003f10 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
    return;
 8003f0e:	e0ce      	b.n	80040ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_SPI_IRQHandler+0x5e>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
    return;
 8003f2c:	e0bf      	b.n	80040ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <HAL_SPI_IRQHandler+0x7e>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80b0 	beq.w	80040ae <HAL_SPI_IRQHandler+0x1de>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80aa 	beq.w	80040ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d023      	beq.n	8003fac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d011      	beq.n	8003f94 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	e00b      	b.n	8003fac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]
        return;
 8003faa:	e080      	b.n	80040ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d014      	beq.n	8003fe0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f043 0201 	orr.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f043 0208 	orr.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	2b00      	cmp	r3, #0
 800400a:	d04f      	beq.n	80040ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800401a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <HAL_SPI_IRQHandler+0x168>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d034      	beq.n	80040a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0203 	bic.w	r2, r2, #3
 8004046:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d011      	beq.n	8004074 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <HAL_SPI_IRQHandler+0x1e4>)
 8004056:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe fc6b 	bl	8002938 <HAL_DMA_Abort_IT>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	2b00      	cmp	r3, #0
 800407a:	d016      	beq.n	80040aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004080:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <HAL_SPI_IRQHandler+0x1e4>)
 8004082:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fc55 	bl	8002938 <HAL_DMA_Abort_IT>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80040a0:	e003      	b.n	80040aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f812 	bl	80040cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80040a8:	e000      	b.n	80040ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80040aa:	bf00      	nop
    return;
 80040ac:	bf00      	nop
  }
}
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	080041e5 	.word	0x080041e5

080040b8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ee:	f7fe f9db 	bl	80024a8 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	d03b      	beq.n	800417c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0220 	bic.w	r2, r2, #32
 8004112:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0202 	bic.w	r2, r2, #2
 8004122:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	2164      	movs	r1, #100	; 0x64
 8004128:	6978      	ldr	r0, [r7, #20]
 800412a:	f000 f8f7 	bl	800431c <SPI_EndRxTxTransaction>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	f7ff ffa9 	bl	80040cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800417a:	e002      	b.n	8004182 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800417c:	6978      	ldr	r0, [r7, #20]
 800417e:	f7fc fd59 	bl	8000c34 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7ff ff8e 	bl	80040b8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0203 	bic.w	r2, r2, #3
 80041c0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f043 0210 	orr.w	r2, r3, #16
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff78 	bl	80040cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff ff64 	bl	80040cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800421c:	f7fe f944 	bl	80024a8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	4413      	add	r3, r2
 800422a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800422c:	f7fe f93c 	bl	80024a8 <HAL_GetTick>
 8004230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004232:	4b39      	ldr	r3, [pc, #228]	; (8004318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	015b      	lsls	r3, r3, #5
 8004238:	0d1b      	lsrs	r3, r3, #20
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004242:	e054      	b.n	80042ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d050      	beq.n	80042ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800424c:	f7fe f92c 	bl	80024a8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	429a      	cmp	r2, r3
 800425a:	d902      	bls.n	8004262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d13d      	bne.n	80042de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427a:	d111      	bne.n	80042a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004284:	d004      	beq.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d107      	bne.n	80042a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a8:	d10f      	bne.n	80042ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e017      	b.n	800430e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d19b      	bne.n	8004244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000004 	.word	0x20000004

0800431c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2201      	movs	r2, #1
 8004330:	2102      	movs	r1, #2
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff ff6a 	bl	800420c <SPI_WaitFlagStateUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e032      	b.n	80043b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800434e:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <SPI_EndRxTxTransaction+0xa0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <SPI_EndRxTxTransaction+0xa4>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	0d5b      	lsrs	r3, r3, #21
 800435a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436c:	d112      	bne.n	8004394 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff ff47 	bl	800420c <SPI_WaitFlagStateUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d016      	beq.n	80043b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e00f      	b.n	80043b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3b01      	subs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b80      	cmp	r3, #128	; 0x80
 80043ac:	d0f2      	beq.n	8004394 <SPI_EndRxTxTransaction+0x78>
 80043ae:	e000      	b.n	80043b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80043b0:	bf00      	nop
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000004 	.word	0x20000004
 80043c0:	165e9f81 	.word	0x165e9f81

080043c4 <siprintf>:
 80043c4:	b40e      	push	{r1, r2, r3}
 80043c6:	b500      	push	{lr}
 80043c8:	b09c      	sub	sp, #112	; 0x70
 80043ca:	ab1d      	add	r3, sp, #116	; 0x74
 80043cc:	9002      	str	r0, [sp, #8]
 80043ce:	9006      	str	r0, [sp, #24]
 80043d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d4:	4809      	ldr	r0, [pc, #36]	; (80043fc <siprintf+0x38>)
 80043d6:	9107      	str	r1, [sp, #28]
 80043d8:	9104      	str	r1, [sp, #16]
 80043da:	4909      	ldr	r1, [pc, #36]	; (8004400 <siprintf+0x3c>)
 80043dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e0:	9105      	str	r1, [sp, #20]
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	a902      	add	r1, sp, #8
 80043e8:	f000 f992 	bl	8004710 <_svfiprintf_r>
 80043ec:	9b02      	ldr	r3, [sp, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	b01c      	add	sp, #112	; 0x70
 80043f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043f8:	b003      	add	sp, #12
 80043fa:	4770      	bx	lr
 80043fc:	2000005c 	.word	0x2000005c
 8004400:	ffff0208 	.word	0xffff0208

08004404 <memset>:
 8004404:	4402      	add	r2, r0
 8004406:	4603      	mov	r3, r0
 8004408:	4293      	cmp	r3, r2
 800440a:	d100      	bne.n	800440e <memset+0xa>
 800440c:	4770      	bx	lr
 800440e:	f803 1b01 	strb.w	r1, [r3], #1
 8004412:	e7f9      	b.n	8004408 <memset+0x4>

08004414 <__errno>:
 8004414:	4b01      	ldr	r3, [pc, #4]	; (800441c <__errno+0x8>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	2000005c 	.word	0x2000005c

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4d0d      	ldr	r5, [pc, #52]	; (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2600      	movs	r6, #0
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4d0b      	ldr	r5, [pc, #44]	; (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	; (8004464 <__libc_init_array+0x44>)
 8004434:	f000 fc6a 	bl	8004d0c <_init>
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2600      	movs	r6, #0
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	0802c96c 	.word	0x0802c96c
 800445c:	0802c96c 	.word	0x0802c96c
 8004460:	0802c96c 	.word	0x0802c96c
 8004464:	0802c970 	.word	0x0802c970

08004468 <__retarget_lock_acquire_recursive>:
 8004468:	4770      	bx	lr

0800446a <__retarget_lock_release_recursive>:
 800446a:	4770      	bx	lr

0800446c <_free_r>:
 800446c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800446e:	2900      	cmp	r1, #0
 8004470:	d044      	beq.n	80044fc <_free_r+0x90>
 8004472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004476:	9001      	str	r0, [sp, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f1a1 0404 	sub.w	r4, r1, #4
 800447e:	bfb8      	it	lt
 8004480:	18e4      	addlt	r4, r4, r3
 8004482:	f000 f8df 	bl	8004644 <__malloc_lock>
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <_free_r+0x94>)
 8004488:	9801      	ldr	r0, [sp, #4]
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	b933      	cbnz	r3, 800449c <_free_r+0x30>
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	6014      	str	r4, [r2, #0]
 8004492:	b003      	add	sp, #12
 8004494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004498:	f000 b8da 	b.w	8004650 <__malloc_unlock>
 800449c:	42a3      	cmp	r3, r4
 800449e:	d908      	bls.n	80044b2 <_free_r+0x46>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf01      	itttt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	1949      	addeq	r1, r1, r5
 80044ae:	6021      	streq	r1, [r4, #0]
 80044b0:	e7ed      	b.n	800448e <_free_r+0x22>
 80044b2:	461a      	mov	r2, r3
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b10b      	cbz	r3, 80044bc <_free_r+0x50>
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	d9fa      	bls.n	80044b2 <_free_r+0x46>
 80044bc:	6811      	ldr	r1, [r2, #0]
 80044be:	1855      	adds	r5, r2, r1
 80044c0:	42a5      	cmp	r5, r4
 80044c2:	d10b      	bne.n	80044dc <_free_r+0x70>
 80044c4:	6824      	ldr	r4, [r4, #0]
 80044c6:	4421      	add	r1, r4
 80044c8:	1854      	adds	r4, r2, r1
 80044ca:	42a3      	cmp	r3, r4
 80044cc:	6011      	str	r1, [r2, #0]
 80044ce:	d1e0      	bne.n	8004492 <_free_r+0x26>
 80044d0:	681c      	ldr	r4, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	6053      	str	r3, [r2, #4]
 80044d6:	440c      	add	r4, r1
 80044d8:	6014      	str	r4, [r2, #0]
 80044da:	e7da      	b.n	8004492 <_free_r+0x26>
 80044dc:	d902      	bls.n	80044e4 <_free_r+0x78>
 80044de:	230c      	movs	r3, #12
 80044e0:	6003      	str	r3, [r0, #0]
 80044e2:	e7d6      	b.n	8004492 <_free_r+0x26>
 80044e4:	6825      	ldr	r5, [r4, #0]
 80044e6:	1961      	adds	r1, r4, r5
 80044e8:	428b      	cmp	r3, r1
 80044ea:	bf04      	itt	eq
 80044ec:	6819      	ldreq	r1, [r3, #0]
 80044ee:	685b      	ldreq	r3, [r3, #4]
 80044f0:	6063      	str	r3, [r4, #4]
 80044f2:	bf04      	itt	eq
 80044f4:	1949      	addeq	r1, r1, r5
 80044f6:	6021      	streq	r1, [r4, #0]
 80044f8:	6054      	str	r4, [r2, #4]
 80044fa:	e7ca      	b.n	8004492 <_free_r+0x26>
 80044fc:	b003      	add	sp, #12
 80044fe:	bd30      	pop	{r4, r5, pc}
 8004500:	200002a8 	.word	0x200002a8

08004504 <sbrk_aligned>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4e0e      	ldr	r6, [pc, #56]	; (8004540 <sbrk_aligned+0x3c>)
 8004508:	460c      	mov	r4, r1
 800450a:	6831      	ldr	r1, [r6, #0]
 800450c:	4605      	mov	r5, r0
 800450e:	b911      	cbnz	r1, 8004516 <sbrk_aligned+0x12>
 8004510:	f000 fba6 	bl	8004c60 <_sbrk_r>
 8004514:	6030      	str	r0, [r6, #0]
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fba1 	bl	8004c60 <_sbrk_r>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d00a      	beq.n	8004538 <sbrk_aligned+0x34>
 8004522:	1cc4      	adds	r4, r0, #3
 8004524:	f024 0403 	bic.w	r4, r4, #3
 8004528:	42a0      	cmp	r0, r4
 800452a:	d007      	beq.n	800453c <sbrk_aligned+0x38>
 800452c:	1a21      	subs	r1, r4, r0
 800452e:	4628      	mov	r0, r5
 8004530:	f000 fb96 	bl	8004c60 <_sbrk_r>
 8004534:	3001      	adds	r0, #1
 8004536:	d101      	bne.n	800453c <sbrk_aligned+0x38>
 8004538:	f04f 34ff 	mov.w	r4, #4294967295
 800453c:	4620      	mov	r0, r4
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	200002ac 	.word	0x200002ac

08004544 <_malloc_r>:
 8004544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004548:	1ccd      	adds	r5, r1, #3
 800454a:	f025 0503 	bic.w	r5, r5, #3
 800454e:	3508      	adds	r5, #8
 8004550:	2d0c      	cmp	r5, #12
 8004552:	bf38      	it	cc
 8004554:	250c      	movcc	r5, #12
 8004556:	2d00      	cmp	r5, #0
 8004558:	4607      	mov	r7, r0
 800455a:	db01      	blt.n	8004560 <_malloc_r+0x1c>
 800455c:	42a9      	cmp	r1, r5
 800455e:	d905      	bls.n	800456c <_malloc_r+0x28>
 8004560:	230c      	movs	r3, #12
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	2600      	movs	r6, #0
 8004566:	4630      	mov	r0, r6
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004640 <_malloc_r+0xfc>
 8004570:	f000 f868 	bl	8004644 <__malloc_lock>
 8004574:	f8d8 3000 	ldr.w	r3, [r8]
 8004578:	461c      	mov	r4, r3
 800457a:	bb5c      	cbnz	r4, 80045d4 <_malloc_r+0x90>
 800457c:	4629      	mov	r1, r5
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff ffc0 	bl	8004504 <sbrk_aligned>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	4604      	mov	r4, r0
 8004588:	d155      	bne.n	8004636 <_malloc_r+0xf2>
 800458a:	f8d8 4000 	ldr.w	r4, [r8]
 800458e:	4626      	mov	r6, r4
 8004590:	2e00      	cmp	r6, #0
 8004592:	d145      	bne.n	8004620 <_malloc_r+0xdc>
 8004594:	2c00      	cmp	r4, #0
 8004596:	d048      	beq.n	800462a <_malloc_r+0xe6>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	4631      	mov	r1, r6
 800459c:	4638      	mov	r0, r7
 800459e:	eb04 0903 	add.w	r9, r4, r3
 80045a2:	f000 fb5d 	bl	8004c60 <_sbrk_r>
 80045a6:	4581      	cmp	r9, r0
 80045a8:	d13f      	bne.n	800462a <_malloc_r+0xe6>
 80045aa:	6821      	ldr	r1, [r4, #0]
 80045ac:	1a6d      	subs	r5, r5, r1
 80045ae:	4629      	mov	r1, r5
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ffa7 	bl	8004504 <sbrk_aligned>
 80045b6:	3001      	adds	r0, #1
 80045b8:	d037      	beq.n	800462a <_malloc_r+0xe6>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	442b      	add	r3, r5
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	f8d8 3000 	ldr.w	r3, [r8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d038      	beq.n	800463a <_malloc_r+0xf6>
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	42a2      	cmp	r2, r4
 80045cc:	d12b      	bne.n	8004626 <_malloc_r+0xe2>
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e00f      	b.n	80045f4 <_malloc_r+0xb0>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	1b52      	subs	r2, r2, r5
 80045d8:	d41f      	bmi.n	800461a <_malloc_r+0xd6>
 80045da:	2a0b      	cmp	r2, #11
 80045dc:	d917      	bls.n	800460e <_malloc_r+0xca>
 80045de:	1961      	adds	r1, r4, r5
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	6025      	str	r5, [r4, #0]
 80045e4:	bf18      	it	ne
 80045e6:	6059      	strne	r1, [r3, #4]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	bf08      	it	eq
 80045ec:	f8c8 1000 	streq.w	r1, [r8]
 80045f0:	5162      	str	r2, [r4, r5]
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	4638      	mov	r0, r7
 80045f6:	f104 060b 	add.w	r6, r4, #11
 80045fa:	f000 f829 	bl	8004650 <__malloc_unlock>
 80045fe:	f026 0607 	bic.w	r6, r6, #7
 8004602:	1d23      	adds	r3, r4, #4
 8004604:	1af2      	subs	r2, r6, r3
 8004606:	d0ae      	beq.n	8004566 <_malloc_r+0x22>
 8004608:	1b9b      	subs	r3, r3, r6
 800460a:	50a3      	str	r3, [r4, r2]
 800460c:	e7ab      	b.n	8004566 <_malloc_r+0x22>
 800460e:	42a3      	cmp	r3, r4
 8004610:	6862      	ldr	r2, [r4, #4]
 8004612:	d1dd      	bne.n	80045d0 <_malloc_r+0x8c>
 8004614:	f8c8 2000 	str.w	r2, [r8]
 8004618:	e7ec      	b.n	80045f4 <_malloc_r+0xb0>
 800461a:	4623      	mov	r3, r4
 800461c:	6864      	ldr	r4, [r4, #4]
 800461e:	e7ac      	b.n	800457a <_malloc_r+0x36>
 8004620:	4634      	mov	r4, r6
 8004622:	6876      	ldr	r6, [r6, #4]
 8004624:	e7b4      	b.n	8004590 <_malloc_r+0x4c>
 8004626:	4613      	mov	r3, r2
 8004628:	e7cc      	b.n	80045c4 <_malloc_r+0x80>
 800462a:	230c      	movs	r3, #12
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4638      	mov	r0, r7
 8004630:	f000 f80e 	bl	8004650 <__malloc_unlock>
 8004634:	e797      	b.n	8004566 <_malloc_r+0x22>
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	e7dc      	b.n	80045f4 <_malloc_r+0xb0>
 800463a:	605b      	str	r3, [r3, #4]
 800463c:	deff      	udf	#255	; 0xff
 800463e:	bf00      	nop
 8004640:	200002a8 	.word	0x200002a8

08004644 <__malloc_lock>:
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <__malloc_lock+0x8>)
 8004646:	f7ff bf0f 	b.w	8004468 <__retarget_lock_acquire_recursive>
 800464a:	bf00      	nop
 800464c:	200002a4 	.word	0x200002a4

08004650 <__malloc_unlock>:
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <__malloc_unlock+0x8>)
 8004652:	f7ff bf0a 	b.w	800446a <__retarget_lock_release_recursive>
 8004656:	bf00      	nop
 8004658:	200002a4 	.word	0x200002a4

0800465c <__ssputs_r>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	688e      	ldr	r6, [r1, #8]
 8004662:	461f      	mov	r7, r3
 8004664:	42be      	cmp	r6, r7
 8004666:	680b      	ldr	r3, [r1, #0]
 8004668:	4682      	mov	sl, r0
 800466a:	460c      	mov	r4, r1
 800466c:	4690      	mov	r8, r2
 800466e:	d82c      	bhi.n	80046ca <__ssputs_r+0x6e>
 8004670:	898a      	ldrh	r2, [r1, #12]
 8004672:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004676:	d026      	beq.n	80046c6 <__ssputs_r+0x6a>
 8004678:	6965      	ldr	r5, [r4, #20]
 800467a:	6909      	ldr	r1, [r1, #16]
 800467c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004680:	eba3 0901 	sub.w	r9, r3, r1
 8004684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004688:	1c7b      	adds	r3, r7, #1
 800468a:	444b      	add	r3, r9
 800468c:	106d      	asrs	r5, r5, #1
 800468e:	429d      	cmp	r5, r3
 8004690:	bf38      	it	cc
 8004692:	461d      	movcc	r5, r3
 8004694:	0553      	lsls	r3, r2, #21
 8004696:	d527      	bpl.n	80046e8 <__ssputs_r+0x8c>
 8004698:	4629      	mov	r1, r5
 800469a:	f7ff ff53 	bl	8004544 <_malloc_r>
 800469e:	4606      	mov	r6, r0
 80046a0:	b360      	cbz	r0, 80046fc <__ssputs_r+0xa0>
 80046a2:	6921      	ldr	r1, [r4, #16]
 80046a4:	464a      	mov	r2, r9
 80046a6:	f000 faeb 	bl	8004c80 <memcpy>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	6126      	str	r6, [r4, #16]
 80046b8:	6165      	str	r5, [r4, #20]
 80046ba:	444e      	add	r6, r9
 80046bc:	eba5 0509 	sub.w	r5, r5, r9
 80046c0:	6026      	str	r6, [r4, #0]
 80046c2:	60a5      	str	r5, [r4, #8]
 80046c4:	463e      	mov	r6, r7
 80046c6:	42be      	cmp	r6, r7
 80046c8:	d900      	bls.n	80046cc <__ssputs_r+0x70>
 80046ca:	463e      	mov	r6, r7
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	4632      	mov	r2, r6
 80046d0:	4641      	mov	r1, r8
 80046d2:	f000 faab 	bl	8004c2c <memmove>
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	1b9b      	subs	r3, r3, r6
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	4433      	add	r3, r6
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	2000      	movs	r0, #0
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	462a      	mov	r2, r5
 80046ea:	f000 fad7 	bl	8004c9c <_realloc_r>
 80046ee:	4606      	mov	r6, r0
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d1e0      	bne.n	80046b6 <__ssputs_r+0x5a>
 80046f4:	6921      	ldr	r1, [r4, #16]
 80046f6:	4650      	mov	r0, sl
 80046f8:	f7ff feb8 	bl	800446c <_free_r>
 80046fc:	230c      	movs	r3, #12
 80046fe:	f8ca 3000 	str.w	r3, [sl]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	f04f 30ff 	mov.w	r0, #4294967295
 800470e:	e7e9      	b.n	80046e4 <__ssputs_r+0x88>

08004710 <_svfiprintf_r>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	4698      	mov	r8, r3
 8004716:	898b      	ldrh	r3, [r1, #12]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	b09d      	sub	sp, #116	; 0x74
 800471c:	4607      	mov	r7, r0
 800471e:	460d      	mov	r5, r1
 8004720:	4614      	mov	r4, r2
 8004722:	d50e      	bpl.n	8004742 <_svfiprintf_r+0x32>
 8004724:	690b      	ldr	r3, [r1, #16]
 8004726:	b963      	cbnz	r3, 8004742 <_svfiprintf_r+0x32>
 8004728:	2140      	movs	r1, #64	; 0x40
 800472a:	f7ff ff0b 	bl	8004544 <_malloc_r>
 800472e:	6028      	str	r0, [r5, #0]
 8004730:	6128      	str	r0, [r5, #16]
 8004732:	b920      	cbnz	r0, 800473e <_svfiprintf_r+0x2e>
 8004734:	230c      	movs	r3, #12
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	e0d0      	b.n	80048e0 <_svfiprintf_r+0x1d0>
 800473e:	2340      	movs	r3, #64	; 0x40
 8004740:	616b      	str	r3, [r5, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	2320      	movs	r3, #32
 8004748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800474c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004750:	2330      	movs	r3, #48	; 0x30
 8004752:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048f8 <_svfiprintf_r+0x1e8>
 8004756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800475a:	f04f 0901 	mov.w	r9, #1
 800475e:	4623      	mov	r3, r4
 8004760:	469a      	mov	sl, r3
 8004762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004766:	b10a      	cbz	r2, 800476c <_svfiprintf_r+0x5c>
 8004768:	2a25      	cmp	r2, #37	; 0x25
 800476a:	d1f9      	bne.n	8004760 <_svfiprintf_r+0x50>
 800476c:	ebba 0b04 	subs.w	fp, sl, r4
 8004770:	d00b      	beq.n	800478a <_svfiprintf_r+0x7a>
 8004772:	465b      	mov	r3, fp
 8004774:	4622      	mov	r2, r4
 8004776:	4629      	mov	r1, r5
 8004778:	4638      	mov	r0, r7
 800477a:	f7ff ff6f 	bl	800465c <__ssputs_r>
 800477e:	3001      	adds	r0, #1
 8004780:	f000 80a9 	beq.w	80048d6 <_svfiprintf_r+0x1c6>
 8004784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004786:	445a      	add	r2, fp
 8004788:	9209      	str	r2, [sp, #36]	; 0x24
 800478a:	f89a 3000 	ldrb.w	r3, [sl]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a1 	beq.w	80048d6 <_svfiprintf_r+0x1c6>
 8004794:	2300      	movs	r3, #0
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800479e:	f10a 0a01 	add.w	sl, sl, #1
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	9307      	str	r3, [sp, #28]
 80047a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047aa:	931a      	str	r3, [sp, #104]	; 0x68
 80047ac:	4654      	mov	r4, sl
 80047ae:	2205      	movs	r2, #5
 80047b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b4:	4850      	ldr	r0, [pc, #320]	; (80048f8 <_svfiprintf_r+0x1e8>)
 80047b6:	f7fb fd13 	bl	80001e0 <memchr>
 80047ba:	9a04      	ldr	r2, [sp, #16]
 80047bc:	b9d8      	cbnz	r0, 80047f6 <_svfiprintf_r+0xe6>
 80047be:	06d0      	lsls	r0, r2, #27
 80047c0:	bf44      	itt	mi
 80047c2:	2320      	movmi	r3, #32
 80047c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c8:	0711      	lsls	r1, r2, #28
 80047ca:	bf44      	itt	mi
 80047cc:	232b      	movmi	r3, #43	; 0x2b
 80047ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d2:	f89a 3000 	ldrb.w	r3, [sl]
 80047d6:	2b2a      	cmp	r3, #42	; 0x2a
 80047d8:	d015      	beq.n	8004806 <_svfiprintf_r+0xf6>
 80047da:	9a07      	ldr	r2, [sp, #28]
 80047dc:	4654      	mov	r4, sl
 80047de:	2000      	movs	r0, #0
 80047e0:	f04f 0c0a 	mov.w	ip, #10
 80047e4:	4621      	mov	r1, r4
 80047e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ea:	3b30      	subs	r3, #48	; 0x30
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d94d      	bls.n	800488c <_svfiprintf_r+0x17c>
 80047f0:	b1b0      	cbz	r0, 8004820 <_svfiprintf_r+0x110>
 80047f2:	9207      	str	r2, [sp, #28]
 80047f4:	e014      	b.n	8004820 <_svfiprintf_r+0x110>
 80047f6:	eba0 0308 	sub.w	r3, r0, r8
 80047fa:	fa09 f303 	lsl.w	r3, r9, r3
 80047fe:	4313      	orrs	r3, r2
 8004800:	9304      	str	r3, [sp, #16]
 8004802:	46a2      	mov	sl, r4
 8004804:	e7d2      	b.n	80047ac <_svfiprintf_r+0x9c>
 8004806:	9b03      	ldr	r3, [sp, #12]
 8004808:	1d19      	adds	r1, r3, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	9103      	str	r1, [sp, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfbb      	ittet	lt
 8004812:	425b      	neglt	r3, r3
 8004814:	f042 0202 	orrlt.w	r2, r2, #2
 8004818:	9307      	strge	r3, [sp, #28]
 800481a:	9307      	strlt	r3, [sp, #28]
 800481c:	bfb8      	it	lt
 800481e:	9204      	strlt	r2, [sp, #16]
 8004820:	7823      	ldrb	r3, [r4, #0]
 8004822:	2b2e      	cmp	r3, #46	; 0x2e
 8004824:	d10c      	bne.n	8004840 <_svfiprintf_r+0x130>
 8004826:	7863      	ldrb	r3, [r4, #1]
 8004828:	2b2a      	cmp	r3, #42	; 0x2a
 800482a:	d134      	bne.n	8004896 <_svfiprintf_r+0x186>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	9203      	str	r2, [sp, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	bfb8      	it	lt
 8004838:	f04f 33ff 	movlt.w	r3, #4294967295
 800483c:	3402      	adds	r4, #2
 800483e:	9305      	str	r3, [sp, #20]
 8004840:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004908 <_svfiprintf_r+0x1f8>
 8004844:	7821      	ldrb	r1, [r4, #0]
 8004846:	2203      	movs	r2, #3
 8004848:	4650      	mov	r0, sl
 800484a:	f7fb fcc9 	bl	80001e0 <memchr>
 800484e:	b138      	cbz	r0, 8004860 <_svfiprintf_r+0x150>
 8004850:	9b04      	ldr	r3, [sp, #16]
 8004852:	eba0 000a 	sub.w	r0, r0, sl
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	4082      	lsls	r2, r0
 800485a:	4313      	orrs	r3, r2
 800485c:	3401      	adds	r4, #1
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	4825      	ldr	r0, [pc, #148]	; (80048fc <_svfiprintf_r+0x1ec>)
 8004866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800486a:	2206      	movs	r2, #6
 800486c:	f7fb fcb8 	bl	80001e0 <memchr>
 8004870:	2800      	cmp	r0, #0
 8004872:	d038      	beq.n	80048e6 <_svfiprintf_r+0x1d6>
 8004874:	4b22      	ldr	r3, [pc, #136]	; (8004900 <_svfiprintf_r+0x1f0>)
 8004876:	bb1b      	cbnz	r3, 80048c0 <_svfiprintf_r+0x1b0>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	3307      	adds	r3, #7
 800487c:	f023 0307 	bic.w	r3, r3, #7
 8004880:	3308      	adds	r3, #8
 8004882:	9303      	str	r3, [sp, #12]
 8004884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004886:	4433      	add	r3, r6
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	e768      	b.n	800475e <_svfiprintf_r+0x4e>
 800488c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004890:	460c      	mov	r4, r1
 8004892:	2001      	movs	r0, #1
 8004894:	e7a6      	b.n	80047e4 <_svfiprintf_r+0xd4>
 8004896:	2300      	movs	r3, #0
 8004898:	3401      	adds	r4, #1
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	4619      	mov	r1, r3
 800489e:	f04f 0c0a 	mov.w	ip, #10
 80048a2:	4620      	mov	r0, r4
 80048a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a8:	3a30      	subs	r2, #48	; 0x30
 80048aa:	2a09      	cmp	r2, #9
 80048ac:	d903      	bls.n	80048b6 <_svfiprintf_r+0x1a6>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0c6      	beq.n	8004840 <_svfiprintf_r+0x130>
 80048b2:	9105      	str	r1, [sp, #20]
 80048b4:	e7c4      	b.n	8004840 <_svfiprintf_r+0x130>
 80048b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ba:	4604      	mov	r4, r0
 80048bc:	2301      	movs	r3, #1
 80048be:	e7f0      	b.n	80048a2 <_svfiprintf_r+0x192>
 80048c0:	ab03      	add	r3, sp, #12
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	462a      	mov	r2, r5
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <_svfiprintf_r+0x1f4>)
 80048c8:	a904      	add	r1, sp, #16
 80048ca:	4638      	mov	r0, r7
 80048cc:	f3af 8000 	nop.w
 80048d0:	1c42      	adds	r2, r0, #1
 80048d2:	4606      	mov	r6, r0
 80048d4:	d1d6      	bne.n	8004884 <_svfiprintf_r+0x174>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	065b      	lsls	r3, r3, #25
 80048da:	f53f af2d 	bmi.w	8004738 <_svfiprintf_r+0x28>
 80048de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048e0:	b01d      	add	sp, #116	; 0x74
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	ab03      	add	r3, sp, #12
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	462a      	mov	r2, r5
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <_svfiprintf_r+0x1f4>)
 80048ee:	a904      	add	r1, sp, #16
 80048f0:	4638      	mov	r0, r7
 80048f2:	f000 f879 	bl	80049e8 <_printf_i>
 80048f6:	e7eb      	b.n	80048d0 <_svfiprintf_r+0x1c0>
 80048f8:	0802c930 	.word	0x0802c930
 80048fc:	0802c93a 	.word	0x0802c93a
 8004900:	00000000 	.word	0x00000000
 8004904:	0800465d 	.word	0x0800465d
 8004908:	0802c936 	.word	0x0802c936

0800490c <_printf_common>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	4616      	mov	r6, r2
 8004912:	4699      	mov	r9, r3
 8004914:	688a      	ldr	r2, [r1, #8]
 8004916:	690b      	ldr	r3, [r1, #16]
 8004918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800491c:	4293      	cmp	r3, r2
 800491e:	bfb8      	it	lt
 8004920:	4613      	movlt	r3, r2
 8004922:	6033      	str	r3, [r6, #0]
 8004924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004928:	4607      	mov	r7, r0
 800492a:	460c      	mov	r4, r1
 800492c:	b10a      	cbz	r2, 8004932 <_printf_common+0x26>
 800492e:	3301      	adds	r3, #1
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0699      	lsls	r1, r3, #26
 8004936:	bf42      	ittt	mi
 8004938:	6833      	ldrmi	r3, [r6, #0]
 800493a:	3302      	addmi	r3, #2
 800493c:	6033      	strmi	r3, [r6, #0]
 800493e:	6825      	ldr	r5, [r4, #0]
 8004940:	f015 0506 	ands.w	r5, r5, #6
 8004944:	d106      	bne.n	8004954 <_printf_common+0x48>
 8004946:	f104 0a19 	add.w	sl, r4, #25
 800494a:	68e3      	ldr	r3, [r4, #12]
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	42ab      	cmp	r3, r5
 8004952:	dc26      	bgt.n	80049a2 <_printf_common+0x96>
 8004954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004958:	1e13      	subs	r3, r2, #0
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	2301      	movne	r3, #1
 8004960:	0692      	lsls	r2, r2, #26
 8004962:	d42b      	bmi.n	80049bc <_printf_common+0xb0>
 8004964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004968:	4649      	mov	r1, r9
 800496a:	4638      	mov	r0, r7
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d01e      	beq.n	80049b0 <_printf_common+0xa4>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	f003 0306 	and.w	r3, r3, #6
 800497a:	2b04      	cmp	r3, #4
 800497c:	bf02      	ittt	eq
 800497e:	68e5      	ldreq	r5, [r4, #12]
 8004980:	6833      	ldreq	r3, [r6, #0]
 8004982:	1aed      	subeq	r5, r5, r3
 8004984:	68a3      	ldr	r3, [r4, #8]
 8004986:	bf0c      	ite	eq
 8004988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800498c:	2500      	movne	r5, #0
 800498e:	4293      	cmp	r3, r2
 8004990:	bfc4      	itt	gt
 8004992:	1a9b      	subgt	r3, r3, r2
 8004994:	18ed      	addgt	r5, r5, r3
 8004996:	2600      	movs	r6, #0
 8004998:	341a      	adds	r4, #26
 800499a:	42b5      	cmp	r5, r6
 800499c:	d11a      	bne.n	80049d4 <_printf_common+0xc8>
 800499e:	2000      	movs	r0, #0
 80049a0:	e008      	b.n	80049b4 <_printf_common+0xa8>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4652      	mov	r2, sl
 80049a6:	4649      	mov	r1, r9
 80049a8:	4638      	mov	r0, r7
 80049aa:	47c0      	blx	r8
 80049ac:	3001      	adds	r0, #1
 80049ae:	d103      	bne.n	80049b8 <_printf_common+0xac>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b8:	3501      	adds	r5, #1
 80049ba:	e7c6      	b.n	800494a <_printf_common+0x3e>
 80049bc:	18e1      	adds	r1, r4, r3
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	2030      	movs	r0, #48	; 0x30
 80049c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c6:	4422      	add	r2, r4
 80049c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d0:	3302      	adds	r3, #2
 80049d2:	e7c7      	b.n	8004964 <_printf_common+0x58>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4622      	mov	r2, r4
 80049d8:	4649      	mov	r1, r9
 80049da:	4638      	mov	r0, r7
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d0e6      	beq.n	80049b0 <_printf_common+0xa4>
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7d9      	b.n	800499a <_printf_common+0x8e>
	...

080049e8 <_printf_i>:
 80049e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	7e0f      	ldrb	r7, [r1, #24]
 80049ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049f0:	2f78      	cmp	r7, #120	; 0x78
 80049f2:	4691      	mov	r9, r2
 80049f4:	4680      	mov	r8, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	469a      	mov	sl, r3
 80049fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fe:	d807      	bhi.n	8004a10 <_printf_i+0x28>
 8004a00:	2f62      	cmp	r7, #98	; 0x62
 8004a02:	d80a      	bhi.n	8004a1a <_printf_i+0x32>
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	f000 80d4 	beq.w	8004bb2 <_printf_i+0x1ca>
 8004a0a:	2f58      	cmp	r7, #88	; 0x58
 8004a0c:	f000 80c0 	beq.w	8004b90 <_printf_i+0x1a8>
 8004a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a18:	e03a      	b.n	8004a90 <_printf_i+0xa8>
 8004a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1e:	2b15      	cmp	r3, #21
 8004a20:	d8f6      	bhi.n	8004a10 <_printf_i+0x28>
 8004a22:	a101      	add	r1, pc, #4	; (adr r1, 8004a28 <_printf_i+0x40>)
 8004a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a28:	08004a81 	.word	0x08004a81
 8004a2c:	08004a95 	.word	0x08004a95
 8004a30:	08004a11 	.word	0x08004a11
 8004a34:	08004a11 	.word	0x08004a11
 8004a38:	08004a11 	.word	0x08004a11
 8004a3c:	08004a11 	.word	0x08004a11
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004a11 	.word	0x08004a11
 8004a48:	08004a11 	.word	0x08004a11
 8004a4c:	08004a11 	.word	0x08004a11
 8004a50:	08004a11 	.word	0x08004a11
 8004a54:	08004b99 	.word	0x08004b99
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004b53 	.word	0x08004b53
 8004a60:	08004a11 	.word	0x08004a11
 8004a64:	08004a11 	.word	0x08004a11
 8004a68:	08004bbb 	.word	0x08004bbb
 8004a6c:	08004a11 	.word	0x08004a11
 8004a70:	08004ac1 	.word	0x08004ac1
 8004a74:	08004a11 	.word	0x08004a11
 8004a78:	08004a11 	.word	0x08004a11
 8004a7c:	08004b5b 	.word	0x08004b5b
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	602a      	str	r2, [r5, #0]
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a90:	2301      	movs	r3, #1
 8004a92:	e09f      	b.n	8004bd4 <_printf_i+0x1ec>
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	0607      	lsls	r7, r0, #24
 8004a9a:	f103 0104 	add.w	r1, r3, #4
 8004a9e:	6029      	str	r1, [r5, #0]
 8004aa0:	d501      	bpl.n	8004aa6 <_printf_i+0xbe>
 8004aa2:	681e      	ldr	r6, [r3, #0]
 8004aa4:	e003      	b.n	8004aae <_printf_i+0xc6>
 8004aa6:	0646      	lsls	r6, r0, #25
 8004aa8:	d5fb      	bpl.n	8004aa2 <_printf_i+0xba>
 8004aaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004aae:	2e00      	cmp	r6, #0
 8004ab0:	da03      	bge.n	8004aba <_printf_i+0xd2>
 8004ab2:	232d      	movs	r3, #45	; 0x2d
 8004ab4:	4276      	negs	r6, r6
 8004ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aba:	485a      	ldr	r0, [pc, #360]	; (8004c24 <_printf_i+0x23c>)
 8004abc:	230a      	movs	r3, #10
 8004abe:	e012      	b.n	8004ae6 <_printf_i+0xfe>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	6029      	str	r1, [r5, #0]
 8004ac8:	0605      	lsls	r5, r0, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xe8>
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xee>
 8004ad0:	0641      	lsls	r1, r0, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe4>
 8004ad4:	881e      	ldrh	r6, [r3, #0]
 8004ad6:	4853      	ldr	r0, [pc, #332]	; (8004c24 <_printf_i+0x23c>)
 8004ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8004ada:	bf0c      	ite	eq
 8004adc:	2308      	moveq	r3, #8
 8004ade:	230a      	movne	r3, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6865      	ldr	r5, [r4, #4]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	bfa2      	ittt	ge
 8004aee:	6821      	ldrge	r1, [r4, #0]
 8004af0:	f021 0104 	bicge.w	r1, r1, #4
 8004af4:	6021      	strge	r1, [r4, #0]
 8004af6:	b90e      	cbnz	r6, 8004afc <_printf_i+0x114>
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d04b      	beq.n	8004b94 <_printf_i+0x1ac>
 8004afc:	4615      	mov	r5, r2
 8004afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b02:	fb03 6711 	mls	r7, r3, r1, r6
 8004b06:	5dc7      	ldrb	r7, [r0, r7]
 8004b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	42bb      	cmp	r3, r7
 8004b10:	460e      	mov	r6, r1
 8004b12:	d9f4      	bls.n	8004afe <_printf_i+0x116>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <_printf_i+0x148>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	07de      	lsls	r6, r3, #31
 8004b1c:	d508      	bpl.n	8004b30 <_printf_i+0x148>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	bfde      	ittt	le
 8004b26:	2330      	movle	r3, #48	; 0x30
 8004b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b30:	1b52      	subs	r2, r2, r5
 8004b32:	6122      	str	r2, [r4, #16]
 8004b34:	f8cd a000 	str.w	sl, [sp]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7ff fee4 	bl	800490c <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14a      	bne.n	8004bde <_printf_i+0x1f6>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b004      	add	sp, #16
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	f043 0320 	orr.w	r3, r3, #32
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	4833      	ldr	r0, [pc, #204]	; (8004c28 <_printf_i+0x240>)
 8004b5c:	2778      	movs	r7, #120	; 0x78
 8004b5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	6829      	ldr	r1, [r5, #0]
 8004b66:	061f      	lsls	r7, r3, #24
 8004b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b6c:	d402      	bmi.n	8004b74 <_printf_i+0x18c>
 8004b6e:	065f      	lsls	r7, r3, #25
 8004b70:	bf48      	it	mi
 8004b72:	b2b6      	uxthmi	r6, r6
 8004b74:	07df      	lsls	r7, r3, #31
 8004b76:	bf48      	it	mi
 8004b78:	f043 0320 	orrmi.w	r3, r3, #32
 8004b7c:	6029      	str	r1, [r5, #0]
 8004b7e:	bf48      	it	mi
 8004b80:	6023      	strmi	r3, [r4, #0]
 8004b82:	b91e      	cbnz	r6, 8004b8c <_printf_i+0x1a4>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	f023 0320 	bic.w	r3, r3, #32
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	e7a7      	b.n	8004ae0 <_printf_i+0xf8>
 8004b90:	4824      	ldr	r0, [pc, #144]	; (8004c24 <_printf_i+0x23c>)
 8004b92:	e7e4      	b.n	8004b5e <_printf_i+0x176>
 8004b94:	4615      	mov	r5, r2
 8004b96:	e7bd      	b.n	8004b14 <_printf_i+0x12c>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	6826      	ldr	r6, [r4, #0]
 8004b9c:	6961      	ldr	r1, [r4, #20]
 8004b9e:	1d18      	adds	r0, r3, #4
 8004ba0:	6028      	str	r0, [r5, #0]
 8004ba2:	0635      	lsls	r5, r6, #24
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	d501      	bpl.n	8004bac <_printf_i+0x1c4>
 8004ba8:	6019      	str	r1, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <_printf_i+0x1ca>
 8004bac:	0670      	lsls	r0, r6, #25
 8004bae:	d5fb      	bpl.n	8004ba8 <_printf_i+0x1c0>
 8004bb0:	8019      	strh	r1, [r3, #0]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6123      	str	r3, [r4, #16]
 8004bb6:	4615      	mov	r5, r2
 8004bb8:	e7bc      	b.n	8004b34 <_printf_i+0x14c>
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	1d1a      	adds	r2, r3, #4
 8004bbe:	602a      	str	r2, [r5, #0]
 8004bc0:	681d      	ldr	r5, [r3, #0]
 8004bc2:	6862      	ldr	r2, [r4, #4]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f7fb fb0a 	bl	80001e0 <memchr>
 8004bcc:	b108      	cbz	r0, 8004bd2 <_printf_i+0x1ea>
 8004bce:	1b40      	subs	r0, r0, r5
 8004bd0:	6060      	str	r0, [r4, #4]
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bdc:	e7aa      	b.n	8004b34 <_printf_i+0x14c>
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4649      	mov	r1, r9
 8004be4:	4640      	mov	r0, r8
 8004be6:	47d0      	blx	sl
 8004be8:	3001      	adds	r0, #1
 8004bea:	d0ad      	beq.n	8004b48 <_printf_i+0x160>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	079b      	lsls	r3, r3, #30
 8004bf0:	d413      	bmi.n	8004c1a <_printf_i+0x232>
 8004bf2:	68e0      	ldr	r0, [r4, #12]
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	4298      	cmp	r0, r3
 8004bf8:	bfb8      	it	lt
 8004bfa:	4618      	movlt	r0, r3
 8004bfc:	e7a6      	b.n	8004b4c <_printf_i+0x164>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4632      	mov	r2, r6
 8004c02:	4649      	mov	r1, r9
 8004c04:	4640      	mov	r0, r8
 8004c06:	47d0      	blx	sl
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d09d      	beq.n	8004b48 <_printf_i+0x160>
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	9903      	ldr	r1, [sp, #12]
 8004c12:	1a5b      	subs	r3, r3, r1
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dcf2      	bgt.n	8004bfe <_printf_i+0x216>
 8004c18:	e7eb      	b.n	8004bf2 <_printf_i+0x20a>
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	f104 0619 	add.w	r6, r4, #25
 8004c20:	e7f5      	b.n	8004c0e <_printf_i+0x226>
 8004c22:	bf00      	nop
 8004c24:	0802c941 	.word	0x0802c941
 8004c28:	0802c952 	.word	0x0802c952

08004c2c <memmove>:
 8004c2c:	4288      	cmp	r0, r1
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	eb01 0402 	add.w	r4, r1, r2
 8004c34:	d902      	bls.n	8004c3c <memmove+0x10>
 8004c36:	4284      	cmp	r4, r0
 8004c38:	4623      	mov	r3, r4
 8004c3a:	d807      	bhi.n	8004c4c <memmove+0x20>
 8004c3c:	1e43      	subs	r3, r0, #1
 8004c3e:	42a1      	cmp	r1, r4
 8004c40:	d008      	beq.n	8004c54 <memmove+0x28>
 8004c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c4a:	e7f8      	b.n	8004c3e <memmove+0x12>
 8004c4c:	4402      	add	r2, r0
 8004c4e:	4601      	mov	r1, r0
 8004c50:	428a      	cmp	r2, r1
 8004c52:	d100      	bne.n	8004c56 <memmove+0x2a>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c5e:	e7f7      	b.n	8004c50 <memmove+0x24>

08004c60 <_sbrk_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_sbrk_r+0x1c>)
 8004c64:	2300      	movs	r3, #0
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fd fb44 	bl	80022f8 <_sbrk>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_sbrk_r+0x1a>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_sbrk_r+0x1a>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	200002a0 	.word	0x200002a0

08004c80 <memcpy>:
 8004c80:	440a      	add	r2, r1
 8004c82:	4291      	cmp	r1, r2
 8004c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c88:	d100      	bne.n	8004c8c <memcpy+0xc>
 8004c8a:	4770      	bx	lr
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c96:	4291      	cmp	r1, r2
 8004c98:	d1f9      	bne.n	8004c8e <memcpy+0xe>
 8004c9a:	bd10      	pop	{r4, pc}

08004c9c <_realloc_r>:
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	4680      	mov	r8, r0
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	460e      	mov	r6, r1
 8004ca6:	b921      	cbnz	r1, 8004cb2 <_realloc_r+0x16>
 8004ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cac:	4611      	mov	r1, r2
 8004cae:	f7ff bc49 	b.w	8004544 <_malloc_r>
 8004cb2:	b92a      	cbnz	r2, 8004cc0 <_realloc_r+0x24>
 8004cb4:	f7ff fbda 	bl	800446c <_free_r>
 8004cb8:	4625      	mov	r5, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc0:	f000 f81b 	bl	8004cfa <_malloc_usable_size_r>
 8004cc4:	4284      	cmp	r4, r0
 8004cc6:	4607      	mov	r7, r0
 8004cc8:	d802      	bhi.n	8004cd0 <_realloc_r+0x34>
 8004cca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cce:	d812      	bhi.n	8004cf6 <_realloc_r+0x5a>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f7ff fc36 	bl	8004544 <_malloc_r>
 8004cd8:	4605      	mov	r5, r0
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d0ed      	beq.n	8004cba <_realloc_r+0x1e>
 8004cde:	42bc      	cmp	r4, r7
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	bf28      	it	cs
 8004ce6:	463a      	movcs	r2, r7
 8004ce8:	f7ff ffca 	bl	8004c80 <memcpy>
 8004cec:	4631      	mov	r1, r6
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7ff fbbc 	bl	800446c <_free_r>
 8004cf4:	e7e1      	b.n	8004cba <_realloc_r+0x1e>
 8004cf6:	4635      	mov	r5, r6
 8004cf8:	e7df      	b.n	8004cba <_realloc_r+0x1e>

08004cfa <_malloc_usable_size_r>:
 8004cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfe:	1f18      	subs	r0, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfbc      	itt	lt
 8004d04:	580b      	ldrlt	r3, [r1, r0]
 8004d06:	18c0      	addlt	r0, r0, r3
 8004d08:	4770      	bx	lr
	...

08004d0c <_init>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	bf00      	nop
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr

08004d18 <_fini>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr
